
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000134  00800060  000025a6  0000263a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000280  00800194  00800194  0000276e  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  0000276e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000025b  00000000  00000000  000027ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001666  00000000  00000000  00002a29  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004b9  00000000  00000000  0000408f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d80  00000000  00000000  00004548  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  000052c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a1  00000000  00000000  00005408  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000be5  00000000  00000000  000058a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000168  00000000  00000000  0000648e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f2 0c 	jmp	0x19e4	; 0x19e4 <__ctors_end>
       4:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__bad_interrupt>
       8:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__bad_interrupt>
       c:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__bad_interrupt>
      10:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__bad_interrupt>
      14:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__bad_interrupt>
      18:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__bad_interrupt>
      1c:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__bad_interrupt>
      20:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__bad_interrupt>
      24:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__bad_interrupt>
      28:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__bad_interrupt>
      2c:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__bad_interrupt>
      30:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__bad_interrupt>
      34:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__bad_interrupt>
      38:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__bad_interrupt>
      3c:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__bad_interrupt>
      40:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__bad_interrupt>
      44:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__bad_interrupt>
      48:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__bad_interrupt>
      4c:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__bad_interrupt>
      50:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__bad_interrupt>

00000054 <gImage_t48>:
      54:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
      64:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
      74:	ff ff ff ff fe fb ef bf ff ff fe fb ef bf ff ff     ................
      84:	fe db 6d be 01 ff fe db 6d bc 00 ff fe db 6d b8     ..m.....m.....m.
      94:	fc 7f fe ff ef f3 87 3f ff ff ff e7 03 9f fc 00     .......?........
      a4:	00 06 01 9f f8 00 00 0c 00 cf f1 ff ff f8 00 cf     ................
      b4:	f3 ff 80 00 00 cf f3 ff 80 00 00 cf f1 ff ff fc     ................
      c4:	00 cf f8 00 00 04 00 8f fe 00 00 06 01 9f ff ff     ................
      d4:	ff e3 03 1f ff ff ff f1 fe 3f ff fc 0f f8 78 7f     .........?....x.
      e4:	ff f8 03 fc 01 ff ff f0 c3 ff 87 ff ff e3 f1 ff     ................
      f4:	ff ff ff e7 f1 ff ff ff ff e7 f9 ff ff ff ff e7     ................
     104:	f9 ff ff ff ff e3 f1 ff ff ff ff f7 f3 ff ff ff     ................
     114:	ff ff ff ff ff ff ff f1 ff ff ff ff ff e0 ff ff     ................
     124:	ff ff ff ec ff ff ff ff ff e4 ff ff ff ff ff f1     ................
     134:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

00000144 <gImage_DC6>:
     144:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     154:	fe 00 7f ff ff fc 00 3f ff ff f8 00 1f ff fc 00     .......?........
     164:	00 00 3f f0 00 00 00 0f e0 00 00 00 07 e0 00 00     ..?.............
     174:	00 07 e1 ff ff ff 87 e3 ff ff ff 87 e3 ff ff ff     ................
     184:	c7 e3 80 00 01 c7 e3 80 00 01 c7 e3 80 00 01 c7     ................
     194:	e3 80 00 01 c7 e3 80 00 01 c7 e3 80 00 01 c7 e3     ................
     1a4:	80 00 01 c7 e3 80 00 01 c7 e3 80 00 01 c7 e3 80     ................
     1b4:	00 01 c7 e3 80 00 01 c7 e3 80 00 01 c7 e3 df ff     ................
     1c4:	ff c7 e1 ff ff ff c7 e1 ff ff ff 87 e3 ff ff ff     ................
     1d4:	c7 e3 80 00 01 c7 e3 80 00 01 c7 e3 80 00 01 c7     ................
     1e4:	e3 80 00 01 c7 e3 80 00 01 c7 e3 80 00 01 c7 e3     ................
     1f4:	80 00 01 c7 e3 80 00 01 c7 e3 80 00 01 c7 e3 80     ................
     204:	00 01 c7 e3 80 00 01 c7 e3 80 00 01 c7 e3 c0 00     ................
     214:	03 c7 e1 ff ff ff c7 e1 ff ff ff c7 e3 ff ff ff     ................
     224:	c7 e3 c0 00 03 c7 e3 80 00 01 c7 e3 80 00 01 c7     ................
     234:	e3 80 00 01 c7 e3 80 00 01 c7 e3 80 00 01 c7 e3     ................
     244:	80 00 01 c7 e3 80 00 01 c7 e3 80 00 01 c7 e3 80     ................
     254:	00 01 c7 e3 80 00 01 c7 e3 80 00 01 c7 e3 c0 00     ................
     264:	03 c7 e3 ff ff ff c7 e3 ff ff ff 87 e3 ff ff ff     ................
     274:	c7 e3 c0 00 03 c7 e3 80 00 01 c7 e3 80 00 01 c7     ................
     284:	e3 80 00 01 c7 e3 80 00 01 c7 e3 80 00 01 c7 e3     ................
     294:	80 00 01 c7 e3 80 00 01 c7 e3 80 00 01 c7 e3 80     ................
     2a4:	00 01 c7 e3 80 00 01 c7 e3 80 00 01 c7 e3 c0 00     ................
     2b4:	01 c7 e3 ff ff ff 87 e3 ff ff ff c7 e1 ff ff ff     ................
     2c4:	87 e0 00 00 00 07 f0 00 00 00 0f f8 00 00 00 1f     ................
     2d4:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff        ...............

000002e3 <gImage_t40>:
     2e3:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     2f3:	ff ff ff ff ef be fb ff ff ef be fb ff ff ed b6     ................
     303:	db e0 1f ed b6 db c0 0f ed b6 db 8f c7 ef b6 ff     ................
     313:	38 73 ff ff fe 70 39 c0 00 00 60 19 80 00 00 c0     8s...p9...`.....
     323:	0c 1f ff ff 80 0c 3f f8 00 00 0c 3f f8 00 00 0c     ......?....?....
     333:	1f ff ff c0 0c 80 00 00 40 08 e0 00 00 60 19 ff     ........@....`..
     343:	ff fe 30 31 ff ff ff 1f e3 ff c0 ff 87 87 ff 80     ..01............
     353:	3f c0 1f ff 0c 3f f8 7f fe 3f 1f ff ff fe 7f 1f     ?....?...?......
     363:	ff ff fe 7f 9f ff ff fe 7f 9f ff ff fe 3f 1f ff     .............?..
     373:	ff ff 7f 3f ff ff ff ff ff ff ff ff 1f ff ff ff     ...?............
     383:	fe 0f ff ff ff fe cf ff ff ff fe 4f ff ff ff ff     ...........O....
     393:	1f ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     3a3:	ff ff ff ff ff ff ff ff                             ........

000003ab <gImage_0>:
     3ab:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     3bb:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     3cb:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     3db:	ff ff ff ff ff ff ff ff ff f0 00 0f ff ff ff ff     ................
     3eb:	ff fc 00 00 00 7f ff ff ff ff e0 00 00 00 07 ff     ................
     3fb:	ff ff ff 00 00 00 00 01 ff ff ff fc 00 00 00 00     ................
     40b:	00 3f ff ff f0 00 00 00 00 00 1f ff ff c0 00 00     .?..............
     41b:	00 00 00 07 ff ff 80 00 00 00 00 00 03 ff ff 00     ................
     42b:	00 00 00 00 00 01 ff fe 00 00 00 00 00 00 00 ff     ................
     43b:	fc 00 00 00 00 00 00 00 7f fc 00 00 00 00 00 00     ................
     44b:	00 3f f8 00 00 00 00 00 00 00 3f f0 00 00 00 00     .?........?.....
     45b:	00 00 00 1f f0 00 00 00 00 00 00 00 1f e0 00 00     ................
     46b:	00 00 00 00 00 0f e0 0f ff ff ff ff ff e0 0f e0     ................
     47b:	3f ff ff ff ff ff f8 0f e0 7f ff ff ff ff ff fc     ?...............
     48b:	07 c0 ff ff ff ff ff ff fe 07 c0 ff ff ff ff ff     ................
     49b:	ff fe 07 c0 ff ff ff ff ff ff fe 07 c0 ff ff ff     ................
     4ab:	ff ff ff fe 07 c0 ff ff ff ff ff ff fe 07 c0 7f     ................
     4bb:	ff ff ff ff ff fe 07 e0 3f ff ff ff ff ff fc 07     ........?.......
     4cb:	e0 1f ff ff ff ff ff f8 0f e0 03 ff ff ff ff ff     ................
     4db:	c0 0f e0 00 00 00 00 00 00 00 0f f0 00 00 00 00     ................
     4eb:	00 00 00 1f f0 00 00 00 00 00 00 00 1f f8 00 00     ................
     4fb:	00 00 00 00 00 3f fc 00 00 00 00 00 00 00 3f fc     .....?........?.
     50b:	00 00 00 00 00 00 00 7f fe 00 00 00 00 00 00 00     ................
     51b:	ff ff 00 00 00 00 00 00 01 ff ff 80 00 00 00 00     ................
     52b:	00 03 ff ff c0 00 00 00 00 00 07 ff ff f0 00 00     ................
     53b:	00 00 00 1f ff ff fc 00 00 00 00 00 7f ff ff ff     ................
     54b:	00 00 00 00 01 ff ff ff ff e0 00 00 00 07 ff ff     ................
     55b:	ff ff fc 00 00 00 7f ff ff ff ff ff f0 00 0f ff     ................
     56b:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     57b:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     58b:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     59b:	ff ff ff ff ff ff ff ff                             ........

000005a3 <gImage_1>:
     5a3:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     5b3:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     5c3:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     5d3:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     5e3:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     5f3:	ff ff ff ff ff ff ff ff ff ff ff ff e1 ff ff ff     ................
     603:	ff ff ff ff ff e0 ff ff ff ff ff ff ff ff c0 ff     ................
     613:	ff ff ff ff ff ff ff c0 ff ff ff ff fe 0f ff ff     ................
     623:	80 ff ff ff ff fc 0f ff ff 01 ff ff ff ff fc 0f     ................
     633:	ff ff 01 ff ff ff ff fc 0f ff fe 01 ff ff ff ff     ................
     643:	fc 0f ff fc 03 ff ff ff ff fc 0f ff fc 03 ff ff     ................
     653:	ff ff fc 0f ff f8 07 ff ff ff ff fc 0f ff f0 07     ................
     663:	ff ff ff ff fc 0f ff e0 00 00 00 00 00 00 0f ff     ................
     673:	e0 00 00 00 00 00 00 0f ff c0 00 00 00 00 00 00     ................
     683:	0f ff 80 00 00 00 00 00 00 0f ff 00 00 00 00 00     ................
     693:	00 00 0f fe 00 00 00 00 00 00 00 0f fc 00 00 00     ................
     6a3:	00 00 00 00 0f f8 00 00 00 00 00 00 00 0f f8 00     ................
     6b3:	00 00 00 00 00 00 0f f8 00 00 00 00 00 00 00 0f     ................
     6c3:	f8 00 00 00 00 00 00 00 0f f8 00 00 00 00 00 00     ................
     6d3:	00 0f f8 00 00 00 00 00 00 00 0f fc 00 00 00 00     ................
     6e3:	00 00 00 0f ff ff ff ff ff ff ff f8 0f ff ff ff     ................
     6f3:	ff ff ff ff fc 0f ff ff ff ff ff ff ff fc 0f ff     ................
     703:	ff ff ff ff ff ff fc 0f ff ff ff ff ff ff ff fc     ................
     713:	0f ff ff ff ff ff ff ff fc 0f ff ff ff ff ff ff     ................
     723:	ff fc 0f ff ff ff ff ff ff ff fc 0f ff ff ff ff     ................
     733:	ff ff ff fc 0f ff ff ff ff ff ff ff fe 1f ff ff     ................
     743:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     753:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     763:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     773:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     783:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     793:	ff ff ff ff ff ff ff ff                             ........

0000079b <gImage_2>:
     79b:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     7ab:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     7bb:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     7cb:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     7db:	ff ff ff ff ff ff f8 1f ff ff f1 ff ff ff ff f0     ................
     7eb:	1f ff ff 00 ff ff ff ff e0 1f ff fc 00 ff ff ff     ................
     7fb:	ff c0 1f ff f0 00 ff ff ff ff 80 1f ff c0 00 ff     ................
     80b:	ff ff ff 00 1f ff 80 00 ff ff ff fe 00 1f ff 00     ................
     81b:	03 ff ff ff fc 00 1f fe 00 1f ff ff ff f8 00 1f     ................
     82b:	fc 00 3f ff ff ff f0 00 1f fc 00 ff ff ff ff e0     ..?.............
     83b:	00 1f f8 01 ff ff ff ff 80 00 1f f0 01 ff ff ff     ................
     84b:	ff 00 00 1f f0 03 ff ff ff fe 00 00 1f f0 03 ff     ................
     85b:	ff ff fc 00 00 1f e0 07 ff ff ff f8 00 00 1f e0     ................
     86b:	07 ff ff ff f0 04 00 1f e0 07 ff ff ff c0 0c 00     ................
     87b:	1f e0 07 ff ff ff 80 1c 00 1f c0 07 ff ff ff 00     ................
     88b:	3c 00 1f c0 03 ff ff fc 00 7c 00 1f c0 03 ff ff     <........|......
     89b:	f8 00 fc 00 1f c0 01 ff ff e0 01 fc 00 1f c0 00     ................
     8ab:	ff ff c0 03 fc 00 1f e0 00 3f ff 00 07 fc 00 1f     .........?......
     8bb:	e0 00 07 f8 00 07 fc 00 1f e0 00 00 00 00 0f fc     ................
     8cb:	00 1f e0 00 00 00 00 1f fc 00 1f f0 00 00 00 00     ................
     8db:	3f fc 00 1f f0 00 00 00 00 7f fc 00 1f f0 00 00     ?...............
     8eb:	00 00 ff fc 00 1f f8 00 00 00 01 ff fc 00 1f f8     ................
     8fb:	00 00 00 03 ff fc 00 1f fc 00 00 00 07 ff fc 00     ................
     90b:	1f fe 00 00 00 0f ff f8 00 1f ff 00 00 00 3f ff     ..............?.
     91b:	f0 00 1f ff 80 00 00 7f ff c0 00 1f ff e0 00 01     ................
     92b:	ff fe 00 00 1f ff f8 00 07 ff fe 00 00 1f ff ff     ................
     93b:	00 1f ff fe 00 00 1f ff ff ff ff ff fe 00 00 1f     ................
     94b:	ff ff ff ff ff fe 00 3f ff ff ff ff ff ff ff 7f     .......?........
     95b:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     96b:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     97b:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     98b:	ff ff ff ff ff ff ff ff                             ........

00000993 <gImage_3>:
     993:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     9a3:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     9b3:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     9c3:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     9d3:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff f3     ................
     9e3:	ff ff ff ff ff ff ff ff 80 ff ff ff ff ff ff ff     ................
     9f3:	ff 00 3f ff ff ff ff ff ff ff 00 3f ff fe 1f ff     ..?........?....
     a03:	ff ff fe 00 1f ff f8 0f ff ff ff fe 00 0f ff f0     ................
     a13:	0f ff ff ff fe 00 0f ff c0 0f ff ff ff fe 00 07     ................
     a23:	ff 80 07 ff ff ff fe 00 07 ff 00 1f ff ff ff fe     ................
     a33:	00 07 fe 00 3f ff ff ff fe 00 07 fc 00 ff ff ff     ....?...........
     a43:	ff ff 00 03 fc 01 ff ff ff ff ff 80 03 f8 01 ff     ................
     a53:	ff cf ff ff c0 03 f8 03 ff ff 83 ff ff e0 03 f0     ................
     a63:	03 ff ff 01 ff ff f8 03 f0 03 ff fe 01 ff ff fc     ................
     a73:	03 f0 03 ff fc 03 ff ff fc 03 e0 03 ff f8 03 ff     ................
     a83:	ff fe 03 e0 03 ff f0 03 ff ff fe 03 e0 03 ff c0     ................
     a93:	03 ff ff fe 03 e0 01 ff 80 01 ff ff fe 03 e0 00     ................
     aa3:	7e 00 01 ff ff fe 07 e0 00 00 00 00 ff ff fc 07     ~...............
     ab3:	e0 00 00 00 00 7f ff fc 07 e0 00 00 00 00 3f ff     ..............?.
     ac3:	f0 07 e0 00 00 00 00 0f ff c0 0f f0 00 00 00 00     ................
     ad3:	00 fc 00 0f f0 00 00 00 00 00 00 00 0f f0 00 00     ................
     ae3:	00 00 00 00 00 1f f8 00 00 08 00 00 00 00 1f f8     ................
     af3:	00 00 18 00 00 00 00 3f fc 00 00 38 00 00 00 00     .......?...8....
     b03:	3f fe 00 00 7c 00 00 00 00 7f ff 00 00 fc 00 00     ?...|...........
     b13:	00 00 ff ff 80 03 fe 00 00 00 01 ff ff e0 0f ff     ................
     b23:	00 00 00 03 ff ff ff ff ff 80 00 00 07 ff ff ff     ................
     b33:	ff ff c0 00 00 0f ff ff ff ff ff e0 00 00 3f ff     ..............?.
     b43:	ff ff ff ff f8 00 00 ff ff ff ff ff ff ff 00 07     ................
     b53:	ff ff ff ff ff ff ff fd ff ff ff ff ff ff ff ff     ................
     b63:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b73:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b83:	ff ff ff ff ff ff ff ff                             ........

00000b8b <gImage_4>:
     b8b:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b9b:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     bab:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     bbb:	ff ff ff ff ff ff ff ff ff ff ff f8 0f ff ff ff     ................
     bcb:	ff ff ff ff f0 07 ff ff ff ff ff ff ff c0 07 ff     ................
     bdb:	ff ff ff ff ff ff 80 07 ff ff ff ff ff ff fe 00     ................
     beb:	07 ff ff ff ff ff ff fc 00 07 ff ff ff ff ff ff     ................
     bfb:	f0 00 07 ff ff ff ff ff ff e0 00 07 ff ff ff ff     ................
     c0b:	ff ff 80 00 07 ff ff ff ff ff ff 00 00 07 ff ff     ................
     c1b:	ff ff ff fc 00 20 07 ff ff ff ff ff f8 00 60 07     ..... ........`.
     c2b:	ff ff ff ff ff e0 01 e0 07 ff ff ff ff ff c0 03     ................
     c3b:	e0 07 ff ff ff ff ff 00 0f e0 07 ff ff ff ff fe     ................
     c4b:	00 1f e0 07 ff ff ff ff f8 00 7f e0 07 ff ff ff     ................
     c5b:	ff f0 00 ff e0 07 ff ff ff ff c0 03 ff e0 07 ff     ................
     c6b:	ff ff ff 80 0f ff e0 07 ff ff ff fe 00 1f ff e0     ................
     c7b:	07 ff ff ff fc 00 3f ff e0 07 ff ff ff f0 00 00     ......?.........
     c8b:	00 00 00 00 07 ff e0 00 00 00 00 00 00 07 ff 80     ................
     c9b:	00 00 00 00 00 00 07 ff 00 00 00 00 00 00 00 07     ................
     cab:	fc 00 00 00 00 00 00 00 07 f8 00 00 00 00 00 00     ................
     cbb:	00 07 e0 00 00 00 00 00 00 00 07 c0 00 00 00 00     ................
     ccb:	00 00 00 07 c0 00 00 00 00 00 00 00 07 c0 00 00     ................
     cdb:	00 00 00 00 00 07 c0 00 00 00 00 00 00 00 07 c0     ................
     ceb:	00 00 00 00 00 00 00 07 c0 00 00 00 00 00 00 00     ................
     cfb:	07 c0 00 00 00 00 00 00 00 07 ff ff ff ff ff e0     ................
     d0b:	07 ff ff ff ff ff ff ff e0 07 ff ff ff ff ff ff     ................
     d1b:	ff e0 07 ff ff ff ff ff ff ff e0 07 ff ff ff ff     ................
     d2b:	ff ff ff e0 07 ff ff ff ff ff ff ff e0 07 ff ff     ................
     d3b:	ff ff ff ff ff e0 07 ff ff ff ff ff ff ff e0 07     ................
     d4b:	ff ff ff ff ff ff ff f0 0f ff ff ff ff ff ff ff     ................
     d5b:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     d6b:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     d7b:	ff ff ff ff ff ff ff ff                             ........

00000d83 <gImage_5>:
     d83:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     d93:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     da3:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     db3:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     dc3:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff f3     ................
     dd3:	ff ff ff ff ff ff ff ff 80 7f ff ff ff ff ff ff     ................
     de3:	ff 00 3f ff ff ff ff ff ff ff 00 1f ff ff ff fe     ..?.............
     df3:	03 ff fe 00 0f f8 00 00 00 01 ff fe 00 0f f8 00     ................
     e03:	00 00 00 ff fe 00 07 f8 00 00 00 00 ff fe 00 07     ................
     e13:	f8 00 00 00 00 7f fe 00 07 f8 00 00 00 00 ff ff     ................
     e23:	00 03 f8 00 00 00 00 ff ff 00 03 f8 00 0f c0 01     ................
     e33:	ff ff 80 03 f8 00 7f c0 01 ff ff c0 03 f8 00 7f     ................
     e43:	c0 01 ff ff e0 03 f8 00 7f 80 01 ff ff f8 03 f8     ................
     e53:	00 7f 80 01 ff ff fc 03 f8 00 7f 80 01 ff ff fe     ................
     e63:	03 f8 00 7f 80 01 ff ff ff 03 f8 00 7f 80 01 ff     ................
     e73:	ff ff 03 f8 00 7f 80 01 ff ff ff 03 f8 00 7f 80     ................
     e83:	01 ff ff ff 03 f8 00 7f c0 00 ff ff fe 07 f8 00     ................
     e93:	7f c0 00 7f ff fe 07 f8 00 7f c0 00 3f ff fc 07     ............?...
     ea3:	f8 00 7f c0 00 1f ff f8 07 f8 00 7f c0 00 07 ff     ................
     eb3:	e0 0f f8 00 7f e0 00 00 fe 00 0f f8 00 7f e0 00     ................
     ec3:	00 00 00 0f f8 00 7f e0 00 00 00 00 1f f8 00 7f     ................
     ed3:	f0 00 00 00 00 1f f0 00 7f f0 00 00 00 00 3f e0     ..............?.
     ee3:	00 7f f8 00 00 00 00 3f e0 00 7f f8 00 00 00 00     .......?........
     ef3:	7f e0 00 7f fc 00 00 00 00 ff e0 00 7f fe 00 00     ................
     f03:	00 01 ff e0 01 ff ff 00 00 00 03 ff e0 ff ff ff     ................
     f13:	80 00 00 07 ff ff ff ff ff c0 00 00 0f ff ff ff     ................
     f23:	ff ff f0 00 00 3f ff ff ff ff ff fc 00 00 ff ff     .....?..........
     f33:	ff ff ff ff ff 80 07 ff ff ff ff ff ff ff ff ff     ................
     f43:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f53:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f63:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f73:	ff ff ff ff ff ff ff ff                             ........

00000f7b <gImage_6>:
     f7b:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f8b:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f9b:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     fab:	ff ff ff ff ff ff ff ff ff ff f8 00 ff ff ff ff     ................
     fbb:	ff ff ff 00 00 07 ff ff ff ff ff f0 00 00 00 ff     ................
     fcb:	ff ff ff ff c0 00 00 00 3f ff ff ff ff 00 00 00     ........?.......
     fdb:	00 0f ff ff ff fc 00 00 00 00 07 ff ff ff f0 00     ................
     feb:	00 00 00 03 ff ff ff c0 00 00 00 00 01 ff ff ff     ................
     ffb:	80 00 00 00 00 00 ff ff ff 00 00 00 00 00 00 7f     ................
    100b:	ff fe 00 00 00 00 00 00 3f ff fc 00 00 00 00 00     ........?.......
    101b:	00 3f ff f8 00 00 00 00 00 00 1f ff f0 00 00 00     .?..............
    102b:	00 00 00 1f ff e0 00 00 00 00 00 00 0f ff c0 00     ................
    103b:	00 00 00 00 00 0f ff c0 00 00 07 ff ff 00 0f ff     ................
    104b:	80 00 00 0f ff ff e0 07 ff 00 00 38 1f ff ff f8     ...........8....
    105b:	07 ff 00 01 f0 1f ff ff fc 07 fe 00 07 f0 1f ff     ................
    106b:	ff fe 07 fe 00 0f f0 3f ff ff fe 07 fc 00 3f e0     .......?......?.
    107b:	3f ff ff fe 07 fc 00 7f e0 3f ff ff fe 07 f8 00     ?........?......
    108b:	ff e0 1f ff ff fe 07 f8 01 ff e0 1f ff ff fc 07     ................
    109b:	f8 03 ff e0 0f ff ff f8 07 f0 07 ff e0 03 ff ff     ................
    10ab:	e0 07 f0 07 ff e0 00 0e 38 00 0f e0 0f ff e0 00     ........8.......
    10bb:	00 00 00 0f e0 1f ff f0 00 00 00 00 0f e0 1f ff     ................
    10cb:	f0 00 00 00 00 0f e0 3f ff f0 00 00 00 00 1f c0     .......?........
    10db:	3f ff f8 00 00 00 00 1f c0 7f ff f8 00 00 00 00     ?...............
    10eb:	3f c0 7f ff fc 00 00 00 00 7f e0 ff ff fc 00 00     ?...............
    10fb:	00 00 7f f0 ff ff fe 00 00 00 00 ff ff ff ff ff     ................
    110b:	00 00 00 01 ff ff ff ff ff 80 00 00 03 ff ff ff     ................
    111b:	ff ff c0 00 00 0f ff ff ff ff ff f0 00 00 3f ff     ..............?.
    112b:	ff ff ff ff fe 00 00 ff ff ff ff ff ff ff c0 0f     ................
    113b:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    114b:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    115b:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    116b:	ff ff ff ff ff ff ff ff                             ........

00001173 <gImage_7>:
    1173:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1183:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1193:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    11a3:	ff ff ff ff ff ff ff ff e1 ff ff ff ff ff ff ff     ................
    11b3:	00 00 ff ff ff ff ff ff f8 00 00 ff ff ff ff ff     ................
    11c3:	ff f8 00 00 ff ff ff ff ff ff f8 00 00 ff ff ff     ................
    11d3:	ff ff ff f8 00 00 ff ff ff ff ff ff f8 00 01 ff     ................
    11e3:	ff ff ff ff ff f8 00 0f ff ff ff ff ff ff f8 00     ................
    11f3:	1f ff ff ff ff ff ff f8 00 3f ff ff ff ff ff f7     .........?......
    1203:	f8 00 3f ff ff ff ff ff 83 f8 00 3f ff ff ff ff     ..?........?....
    1213:	fe 03 f8 00 3f ff ff ff ff f8 03 f8 00 3f ff ff     ....?........?..
    1223:	ff ff e0 03 f8 00 3f ff ff ff ff 00 03 f8 00 3f     ......?........?
    1233:	ff ff ff fc 00 03 f8 00 3f ff ff ff f0 00 03 f8     ........?.......
    1243:	00 3f ff ff ff 80 00 03 f8 00 3f ff ff fe 00 00     .?........?.....
    1253:	03 f8 00 3f ff ff f8 00 00 03 f8 00 3f ff ff c0     ...?........?...
    1263:	00 00 03 f8 00 3f ff ff 00 00 00 03 f8 00 3f ff     .....?........?.
    1273:	fc 00 00 00 0f f8 00 3f ff f0 00 00 00 7f f8 00     .......?........
    1283:	3f ff 80 00 00 01 ff f8 00 3f fe 00 00 00 0f ff     ?........?......
    1293:	f8 00 3f f8 00 00 00 7f ff f8 00 3f c0 00 00 01     ..?........?....
    12a3:	ff ff f8 00 3f 00 00 00 0f ff ff f8 00 3c 00 00     ....?........<..
    12b3:	00 3f ff ff f8 00 30 00 00 01 ff ff ff f8 00 00     .?....0.........
    12c3:	00 00 0f ff ff ff f8 00 00 00 00 3f ff ff ff f8     ...........?....
    12d3:	00 00 00 01 ff ff ff ff f8 00 00 00 07 ff ff ff     ................
    12e3:	ff f8 00 00 00 3f ff ff ff ff f8 00 00 01 ff ff     .....?..........
    12f3:	ff ff ff f8 00 00 07 ff ff ff ff ff f8 00 00 3f     ...............?
    1303:	ff ff ff ff ff f8 00 01 ff ff ff ff ff ff f8 00     ................
    1313:	07 ff ff ff ff ff ff f8 00 3f ff ff ff ff ff ff     .........?......
    1323:	f8 00 ff ff ff ff ff ff ff f8 07 ff ff ff ff ff     ................
    1333:	ff ff fc 3f ff ff ff ff ff ff ff ff ff ff ff ff     ...?............
    1343:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1353:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1363:	ff ff ff ff ff ff ff ff                             ........

0000136b <gImage_8>:
    136b:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    137b:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    138b:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    139b:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    13ab:	ff ff ff ff ff 87 ff ff ff ff ff ff ff fc 00 7f     ................
    13bb:	ff ff fe 00 3f ff f0 00 1f ff ff f0 00 0f ff c0     ....?...........
    13cb:	00 07 ff ff e0 00 03 ff 80 00 03 ff ff 80 00 00     ................
    13db:	ff 00 00 01 ff ff 00 00 00 7f 00 00 00 ff fe 00     ................
    13eb:	00 00 3e 00 00 00 7f fc 00 00 00 1c 00 00 00 3f     ..>............?
    13fb:	f8 00 00 00 18 00 00 00 3f f8 00 00 00 08 00 00     ........?.......
    140b:	00 1f f0 00 00 00 00 00 00 00 1f f0 00 00 00 00     ................
    141b:	00 00 00 1f f0 00 00 00 00 00 00 00 0f e0 07 e0     ................
    142b:	00 00 07 ff c0 0f e0 1f f8 00 00 1f ff f0 0f e0     ................
    143b:	3f fc 00 00 3f ff f8 07 c0 7f fe 00 00 7f ff fc     ?...?...........
    144b:	07 c0 7f ff 00 00 7f ff fc 07 c0 ff ff 80 00 3f     ...............?
    145b:	ff fe 07 c0 ff ff 80 00 3f ff fe 07 c0 ff ff c0     ........?.......
    146b:	00 1f ff fe 07 c0 ff ff e0 00 0f ff fe 07 c0 7f     ................
    147b:	ff e0 00 0f ff fe 07 c0 7f ff f0 00 07 ff fe 07     ................
    148b:	c0 7f ff f0 00 03 ff fe 07 e0 3f ff f0 00 03 ff     ..........?.....
    149b:	fc 07 e0 1f ff c0 00 01 ff fc 0f e0 07 ff 80 00     ................
    14ab:	00 ff f8 0f e0 00 78 00 00 00 7f f0 0f f0 00 00     ......x.........
    14bb:	00 00 00 1f c0 1f f0 00 00 00 00 00 00 00 1f f0     ................
    14cb:	00 00 00 00 00 00 00 1f f8 00 00 01 80 00 00 00     ................
    14db:	3f f8 00 00 01 c0 00 00 00 3f fc 00 00 03 e0 00     ?........?......
    14eb:	00 00 7f fe 00 00 07 f0 00 00 00 ff ff 00 00 0f     ................
    14fb:	f0 00 00 01 ff ff 80 00 1f f8 00 00 03 ff ff c0     ................
    150b:	00 3f fe 00 00 07 ff ff f0 00 7f ff 00 00 0f ff     .?..............
    151b:	ff fe 01 ff ff 80 00 3f ff ff ff ff ff ff f0 01     .......?........
    152b:	ff ff ff ff ff ff ff fe 1f ff ff ff ff ff ff ff     ................
    153b:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    154b:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    155b:	ff ff ff ff ff ff ff ff                             ........

00001563 <gImage_9>:
    1563:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1573:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1583:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1593:	ff ff ff ff ff ff ff ff c0 01 ff ff ff ff ff ff     ................
    15a3:	fe 00 00 3f ff ff ff ff ff f8 00 00 0f ff ff ff     ...?............
    15b3:	ff ff e0 00 00 07 ff ff ff ff ff c0 00 00 03 ff     ................
    15c3:	ff ff ff ff 80 00 00 00 ff ff ff bf ff 00 00 00     ................
    15d3:	00 ff ff ff 1f fe 00 00 00 00 7f ff fe 0f fc 00     ................
    15e3:	00 00 00 3f ff fe 07 f8 00 00 00 00 3f ff fc 07     ...?........?...
    15f3:	f8 00 00 00 00 1f ff fc 07 f0 00 00 00 00 1f ff     ................
    1603:	f8 0f f0 00 00 00 00 0f ff f8 0f f0 00 00 00 00     ................
    1613:	0f ff f0 0f e0 00 00 00 00 0f ff f0 0f e0 01 ff     ................
    1623:	fe 00 0f ff e0 1f e0 0f ff ff c0 0f ff c0 1f c0     ................
    1633:	3f ff ff f0 0f ff 80 1f c0 7f ff ff f8 07 ff 00     ?...............
    1643:	3f c0 ff ff ff f8 0f fe 00 3f c0 ff ff ff f8 0f     ?........?......
    1653:	fc 00 7f c0 ff ff ff f8 0f f8 00 7f c0 ff ff ff     ................
    1663:	f8 0f e0 00 ff c0 7f ff ff f8 0f 80 00 ff c0 7f     ................
    1673:	ff ff f0 1e 00 01 ff c0 3f ff ff f0 18 00 01 ff     ........?.......
    1683:	e0 0f ff ff e0 00 00 03 ff e0 01 ff ff e0 00 00     ................
    1693:	07 ff e0 00 00 00 00 00 00 07 ff f0 00 00 00 00     ................
    16a3:	00 00 0f ff f0 00 00 00 00 00 00 1f ff f0 00 00     ................
    16b3:	00 00 00 00 3f ff f8 00 00 00 00 00 00 7f ff fc     ....?...........
    16c3:	00 00 00 00 00 00 ff ff fc 00 00 00 00 00 01 ff     ................
    16d3:	ff fe 00 00 00 00 00 03 ff ff ff 00 00 00 00 00     ................
    16e3:	07 ff ff ff 80 00 00 00 00 1f ff ff ff c0 00 00     ................
    16f3:	00 00 3f ff ff ff f0 00 00 00 00 ff ff ff ff fc     ..?.............
    1703:	00 00 00 03 ff ff ff ff ff 00 00 00 1f ff ff ff     ................
    1713:	ff ff e0 00 00 ff ff ff ff ff ff fe 00 1f ff ff     ................
    1723:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1733:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1743:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1753:	ff ff ff ff ff ff ff ff                             ........

0000175b <d>:
    175b:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    176b:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    177b:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    178b:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff f9     ................
    179b:	ff 3f e7 fc ff ff ff ff f9 ff 3f e7 fc ff ff ff     .?........?.....
    17ab:	ff f9 ff 3f e7 fc ff ff ff ff f9 ef 3d e7 bc ff     ...?........=...
    17bb:	f8 3f ff f9 e7 3d e7 3c ff c0 03 ff f9 e7 3d e7     .?...=.<......=.
    17cb:	3c ff 00 00 ff f9 e7 3d e7 3c fc 00 00 7f f9 e7     <......=.<......
    17db:	3d e7 3c f8 0f f0 1f f9 e7 3d e7 3c f0 3f fc 0f     =.<......=.<.?..
    17eb:	f9 e7 3d e7 3c e0 ff fe 07 fd ef fd ff bd c1 f0     ..=.<...........
    17fb:	0f 87 ff ff ff ff ff c3 c0 03 83 fc 00 00 00 00     ................
    180b:	07 80 01 c3 e0 00 00 00 00 07 00 00 e1 c0 00 00     ................
    181b:	00 00 0e 00 00 e1 80 00 00 00 00 0e 00 00 70 87     ..............p.
    182b:	ff ff ff ff fc 00 00 70 0f ff ff ff ff fc 00 00     .......p........
    183b:	30 0f ff fe 00 00 00 00 00 30 0f ff fe 00 00 00     0........0......
    184b:	00 00 30 0f ff fe 00 00 00 00 00 30 0f ff ff ff     ..0........0....
    185b:	ff fc 00 00 70 87 ff ff ff ff fc 00 00 70 80 00     ....p........p..
    186b:	00 00 00 0e 00 00 70 c0 00 00 00 00 0e 00 00 e1     ......p.........
    187b:	e0 00 00 00 00 07 00 00 e1 f8 00 00 00 00 07 80     ................
    188b:	01 c3 ff ff ff ff ff c3 c0 03 c3 ff ff ff ff ff     ................
    189b:	c1 f0 0f 87 ff ff ff ff ff e0 ff fe 07 ff ff f8     ................
    18ab:	3f ff f0 3f fc 0f ff ff c0 07 ff f8 0f f0 1f ff     ?..?............
    18bb:	ff 80 01 ff fc 00 00 7f ff fe 00 00 ff ff 00 00     ................
    18cb:	ff ff fe 00 00 ff ff c0 03 ff ff fc 07 c0 7f ff     ................
    18db:	f8 3f ff ff f8 1f f0 7f ff ff ff ff ff f8 3f f8     .?............?.
    18eb:	3f ff ff ff ff ff f8 7f fc 3f ff ff ff ff ff f8     ?........?......
    18fb:	7f fc 3f ff ff ff ff ff f8 7f fc 3f ff ff ff ff     ..?........?....
    190b:	ff f8 7f fc 3f ff ff ff ff ff f8 7f fc 3f ff ff     ....?........?..
    191b:	ff ff ff f8 7f f8 3f ff ff ff ff ff f8 3f f8 7f     ......?......?..
    192b:	ff ff ff ff ff fc 3f f8 7f ff ff ff ff ff ff ff     ......?.........
    193b:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    194b:	ff ff ff ff ff ff ff ff ff fe 1f ff ff ff ff ff     ................
    195b:	ff ff f8 0f ff ff ff ff ff ff ff f8 07 ff ff ff     ................
    196b:	ff ff ff ff f1 c7 ff ff ff ff ff ff ff f3 e7 ff     ................
    197b:	ff ff ff ff ff ff f1 e7 ff ff ff ff ff ff ff f8     ................
    198b:	87 ff ff ff ff ff ff ff f8 0f ff ff ff ff ff ff     ................
    199b:	ff fc 1f ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    19ab:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    19bb:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    19cb:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    19db:	ff ff ff ff ff ff ff ff 00                          .........

000019e4 <__ctors_end>:
    19e4:	11 24       	eor	r1, r1
    19e6:	1f be       	out	0x3f, r1	; 63
    19e8:	cf e5       	ldi	r28, 0x5F	; 95
    19ea:	d4 e0       	ldi	r29, 0x04	; 4
    19ec:	de bf       	out	0x3e, r29	; 62
    19ee:	cd bf       	out	0x3d, r28	; 61

000019f0 <__do_copy_data>:
    19f0:	11 e0       	ldi	r17, 0x01	; 1
    19f2:	a0 e6       	ldi	r26, 0x60	; 96
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e6 ea       	ldi	r30, 0xA6	; 166
    19f8:	f5 e2       	ldi	r31, 0x25	; 37
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <.do_copy_data_start>

000019fc <.do_copy_data_loop>:
    19fc:	05 90       	lpm	r0, Z+
    19fe:	0d 92       	st	X+, r0

00001a00 <.do_copy_data_start>:
    1a00:	a4 39       	cpi	r26, 0x94	; 148
    1a02:	b1 07       	cpc	r27, r17
    1a04:	d9 f7       	brne	.-10     	; 0x19fc <.do_copy_data_loop>

00001a06 <__do_clear_bss>:
    1a06:	14 e0       	ldi	r17, 0x04	; 4
    1a08:	a4 e9       	ldi	r26, 0x94	; 148
    1a0a:	b1 e0       	ldi	r27, 0x01	; 1
    1a0c:	01 c0       	rjmp	.+2      	; 0x1a10 <.do_clear_bss_start>

00001a0e <.do_clear_bss_loop>:
    1a0e:	1d 92       	st	X+, r1

00001a10 <.do_clear_bss_start>:
    1a10:	a4 31       	cpi	r26, 0x14	; 20
    1a12:	b1 07       	cpc	r27, r17
    1a14:	e1 f7       	brne	.-8      	; 0x1a0e <.do_clear_bss_loop>
    1a16:	0e 94 45 10 	call	0x208a	; 0x208a <main>
    1a1a:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <_exit>

00001a1e <__bad_interrupt>:
    1a1e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001a22 <EPD_W21_WriteDispRamMono>:

	EPD_W21_CS_1;
}

static void EPD_W21_WriteDispRamMono(unsigned char XSize, unsigned int YSize,unsigned char dispdata)
{
    1a22:	bf 92       	push	r11
    1a24:	cf 92       	push	r12
    1a26:	df 92       	push	r13
    1a28:	ef 92       	push	r14
    1a2a:	ff 92       	push	r15
    1a2c:	0f 93       	push	r16
    1a2e:	1f 93       	push	r17
    1a30:	cf 93       	push	r28
    1a32:	df 93       	push	r29
    1a34:	28 2f       	mov	r18, r24
    1a36:	6b 01       	movw	r12, r22
    1a38:	b4 2e       	mov	r11, r20
	int i = 0, j = 0;
	if((XSize%8) != 0)
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	87 70       	andi	r24, 0x07	; 7
    1a3e:	90 70       	andi	r25, 0x00	; 0
    1a40:	89 2b       	or	r24, r25
    1a42:	11 f0       	breq	.+4      	; 0x1a48 <EPD_W21_WriteDispRamMono+0x26>
		XSize = XSize + (8 - (XSize%8));
    1a44:	28 7f       	andi	r18, 0xF8	; 248
    1a46:	28 5f       	subi	r18, 0xF8	; 248
	XSize /= 8;
    1a48:	f2 2e       	mov	r15, r18
    1a4a:	f6 94       	lsr	r15
    1a4c:	f6 94       	lsr	r15
    1a4e:	f6 94       	lsr	r15
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a54:	40 e2       	ldi	r20, 0x20	; 32
    1a56:	5e e4       	ldi	r21, 0x4E	; 78
static unsigned char ReadBusy(void)
{
	unsigned long i = 0;
	for (i = 0; i < 400; i++)
	{
		if (isEPD_W21_BUSY == EPD_W21_BUSY_LEVEL)
    1a58:	b0 9b       	sbis	0x16, 0	; 22
    1a5a:	09 c0       	rjmp	.+18     	; 0x1a6e <EPD_W21_WriteDispRamMono+0x4c>
    1a5c:	ca 01       	movw	r24, r20
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	f1 f7       	brne	.-4      	; 0x1a5e <EPD_W21_WriteDispRamMono+0x3c>
    1a62:	2f 5f       	subi	r18, 0xFF	; 255
    1a64:	3f 4f       	sbci	r19, 0xFF	; 255
};

static unsigned char ReadBusy(void)
{
	unsigned long i = 0;
	for (i = 0; i < 400; i++)
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	20 39       	cpi	r18, 0x90	; 144
    1a6a:	38 07       	cpc	r19, r24
    1a6c:	a9 f7       	brne	.-22     	; 0x1a58 <EPD_W21_WriteDispRamMono+0x36>
		XSize = XSize + (8 - (XSize%8));
	XSize /= 8;
	//while(isEPD_W21_BUSY == 1);	// wait	
	ReadBusy();

	EPD_W21_CS_0;
    1a6e:	c4 98       	cbi	0x18, 4	; 24
	EPD_W21_DC_0;		// command write
    1a70:	c2 98       	cbi	0x18, 2	; 24
	SPI_Write(0x24);
    1a72:	84 e2       	ldi	r24, 0x24	; 36
    1a74:	0e 94 21 10 	call	0x2042	; 0x2042 <SPI_Write>

	EPD_W21_DC_1;		// data write
    1a78:	c2 9a       	sbi	0x18, 2	; 24
    1a7a:	00 e0       	ldi	r16, 0x00	; 0
    1a7c:	10 e0       	ldi	r17, 0x00	; 0
	for (i=0; i<YSize; i++)
	{
		for (j=0; j<XSize; j++)
    1a7e:	ef 2c       	mov	r14, r15
    1a80:	ff 24       	eor	r15, r15
    1a82:	09 c0       	rjmp	.+18     	; 0x1a96 <EPD_W21_WriteDispRamMono+0x74>
		{
			SPI_Write(dispdata);
    1a84:	8b 2d       	mov	r24, r11
    1a86:	0e 94 21 10 	call	0x2042	; 0x2042 <SPI_Write>
	SPI_Write(0x24);

	EPD_W21_DC_1;		// data write
	for (i=0; i<YSize; i++)
	{
		for (j=0; j<XSize; j++)
    1a8a:	21 96       	adiw	r28, 0x01	; 1
    1a8c:	ce 15       	cp	r28, r14
    1a8e:	df 05       	cpc	r29, r15
    1a90:	cc f3       	brlt	.-14     	; 0x1a84 <EPD_W21_WriteDispRamMono+0x62>
	EPD_W21_CS_0;
	EPD_W21_DC_0;		// command write
	SPI_Write(0x24);

	EPD_W21_DC_1;		// data write
	for (i=0; i<YSize; i++)
    1a92:	0f 5f       	subi	r16, 0xFF	; 255
    1a94:	1f 4f       	sbci	r17, 0xFF	; 255
    1a96:	0c 15       	cp	r16, r12
    1a98:	1d 05       	cpc	r17, r13
    1a9a:	18 f4       	brcc	.+6      	; 0x1aa2 <EPD_W21_WriteDispRamMono+0x80>
    1a9c:	c0 e0       	ldi	r28, 0x00	; 0
    1a9e:	d0 e0       	ldi	r29, 0x00	; 0
    1aa0:	f5 cf       	rjmp	.-22     	; 0x1a8c <EPD_W21_WriteDispRamMono+0x6a>
		for (j=0; j<XSize; j++)
		{
			SPI_Write(dispdata);
		}
	}
	EPD_W21_CS_1;
    1aa2:	c4 9a       	sbi	0x18, 4	; 24
}
    1aa4:	df 91       	pop	r29
    1aa6:	cf 91       	pop	r28
    1aa8:	1f 91       	pop	r17
    1aaa:	0f 91       	pop	r16
    1aac:	ff 90       	pop	r15
    1aae:	ef 90       	pop	r14
    1ab0:	df 90       	pop	r13
    1ab2:	cf 90       	pop	r12
    1ab4:	bf 90       	pop	r11
    1ab6:	08 95       	ret

00001ab8 <EPD_W21_WriteCMD_p1>:
//	SPI_Write(command);
//	EPD_W21_CS_1;
//}

static void EPD_W21_WriteCMD_p1(unsigned char command, unsigned char para)
{
    1ab8:	0f 93       	push	r16
    1aba:	1f 93       	push	r17
    1abc:	06 2f       	mov	r16, r22
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	40 e2       	ldi	r20, 0x20	; 32
    1ac4:	5e e4       	ldi	r21, 0x4E	; 78
static unsigned char ReadBusy(void)
{
	unsigned long i = 0;
	for (i = 0; i < 400; i++)
	{
		if (isEPD_W21_BUSY == EPD_W21_BUSY_LEVEL)
    1ac6:	b0 9b       	sbis	0x16, 0	; 22
    1ac8:	09 c0       	rjmp	.+18     	; 0x1adc <EPD_W21_WriteCMD_p1+0x24>
    1aca:	fa 01       	movw	r30, r20
    1acc:	31 97       	sbiw	r30, 0x01	; 1
    1ace:	f1 f7       	brne	.-4      	; 0x1acc <EPD_W21_WriteCMD_p1+0x14>
    1ad0:	2f 5f       	subi	r18, 0xFF	; 255
    1ad2:	3f 4f       	sbci	r19, 0xFF	; 255
};

static unsigned char ReadBusy(void)
{
	unsigned long i = 0;
	for (i = 0; i < 400; i++)
    1ad4:	91 e0       	ldi	r25, 0x01	; 1
    1ad6:	20 39       	cpi	r18, 0x90	; 144
    1ad8:	39 07       	cpc	r19, r25
    1ada:	a9 f7       	brne	.-22     	; 0x1ac6 <EPD_W21_WriteCMD_p1+0xe>
static void EPD_W21_WriteCMD_p1(unsigned char command, unsigned char para)
{
	//while(isEPD_W21_BUSY == 1);	// wait
	ReadBusy();

	EPD_W21_CS_0;
    1adc:	c4 98       	cbi	0x18, 4	; 24
	EPD_W21_DC_0;		// command write
    1ade:	c2 98       	cbi	0x18, 2	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ae0:	1d e0       	ldi	r17, 0x0D	; 13
    1ae2:	91 2f       	mov	r25, r17
    1ae4:	9a 95       	dec	r25
    1ae6:	f1 f7       	brne	.-4      	; 0x1ae4 <EPD_W21_WriteCMD_p1+0x2c>
	_delay_us(5);
	SPI_Write(command);
    1ae8:	0e 94 21 10 	call	0x2042	; 0x2042 <SPI_Write>
	EPD_W21_DC_1;		// command write
    1aec:	c2 9a       	sbi	0x18, 2	; 24
    1aee:	81 2f       	mov	r24, r17
    1af0:	8a 95       	dec	r24
    1af2:	f1 f7       	brne	.-4      	; 0x1af0 <EPD_W21_WriteCMD_p1+0x38>
	_delay_us(5);
	SPI_Write(para);
    1af4:	80 2f       	mov	r24, r16
    1af6:	0e 94 21 10 	call	0x2042	; 0x2042 <SPI_Write>
    1afa:	1a 95       	dec	r17
    1afc:	f1 f7       	brne	.-4      	; 0x1afa <EPD_W21_WriteCMD_p1+0x42>
	_delay_us(5);
	EPD_W21_CS_1;
    1afe:	c4 9a       	sbi	0x18, 4	; 24
}
    1b00:	1f 91       	pop	r17
    1b02:	0f 91       	pop	r16
    1b04:	08 95       	ret

00001b06 <EPD_W21_WriteCMD>:
	}
	return 0;
}

static void EPD_W21_WriteCMD(unsigned char command)
{
    1b06:	1f 93       	push	r17
	EPD_W21_CS_0;
    1b08:	c4 98       	cbi	0x18, 4	; 24
	EPD_W21_DC_0;		// command write
    1b0a:	c2 98       	cbi	0x18, 2	; 24
    1b0c:	1d e0       	ldi	r17, 0x0D	; 13
    1b0e:	91 2f       	mov	r25, r17
    1b10:	9a 95       	dec	r25
    1b12:	f1 f7       	brne	.-4      	; 0x1b10 <EPD_W21_WriteCMD+0xa>
	_delay_us(5);
	SPI_Write(command);
    1b14:	0e 94 21 10 	call	0x2042	; 0x2042 <SPI_Write>
    1b18:	1a 95       	dec	r17
    1b1a:	f1 f7       	brne	.-4      	; 0x1b18 <EPD_W21_WriteCMD+0x12>
	_delay_us(5);
	EPD_W21_CS_1;
    1b1c:	c4 9a       	sbi	0x18, 4	; 24
}
    1b1e:	1f 91       	pop	r17
    1b20:	08 95       	ret

00001b22 <EPD_W21_Update_Part>:
	EPD_W21_WriteCMD(0xff);
}

static void EPD_W21_Update_Part(void)
{
	EPD_W21_WriteCMD_p1(0x22, 0x04);
    1b22:	82 e2       	ldi	r24, 0x22	; 34
    1b24:	64 e0       	ldi	r22, 0x04	; 4
    1b26:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <EPD_W21_WriteCMD_p1>
	//EPD_W21_WriteCMD_p1(0x22,0x08);
	EPD_W21_WriteCMD(0x20);
    1b2a:	80 e2       	ldi	r24, 0x20	; 32
    1b2c:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <EPD_W21_WriteCMD>
	EPD_W21_WriteCMD(0xff);
    1b30:	8f ef       	ldi	r24, 0xFF	; 255
    1b32:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <EPD_W21_WriteCMD>
}
    1b36:	08 95       	ret

00001b38 <EPD_W21_POWERON>:
	EPD_W21_CS_1;
}

static void EPD_W21_POWERON(void)
{
	EPD_W21_WriteCMD_p1(0x22, 0xc0);
    1b38:	82 e2       	ldi	r24, 0x22	; 34
    1b3a:	60 ec       	ldi	r22, 0xC0	; 192
    1b3c:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <EPD_W21_WriteCMD_p1>
	EPD_W21_WriteCMD(0x20);
    1b40:	80 e2       	ldi	r24, 0x20	; 32
    1b42:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <EPD_W21_WriteCMD>
	//EPD_W21_WriteCMD(0xff);
}
    1b46:	08 95       	ret

00001b48 <EPD_W21_Write>:
//	SPI_Write(para2);
//	EPD_W21_CS_1;
//} 

static void EPD_W21_Write(unsigned char *value, unsigned char datalen)
{
    1b48:	df 92       	push	r13
    1b4a:	ef 92       	push	r14
    1b4c:	ff 92       	push	r15
    1b4e:	0f 93       	push	r16
    1b50:	1f 93       	push	r17
    1b52:	cf 93       	push	r28
    1b54:	df 93       	push	r29
    1b56:	8c 01       	movw	r16, r24
    1b58:	e6 2e       	mov	r14, r22
	unsigned char i = 0;
	unsigned char *ptemp;

	ptemp = value;

	EPD_W21_CS_0;
    1b5a:	c4 98       	cbi	0x18, 4	; 24
	EPD_W21_DC_0;		// command write
    1b5c:	c2 98       	cbi	0x18, 2	; 24
    1b5e:	8d e0       	ldi	r24, 0x0D	; 13
    1b60:	f8 2e       	mov	r15, r24
    1b62:	8f 2d       	mov	r24, r15
    1b64:	8a 95       	dec	r24
    1b66:	f1 f7       	brne	.-4      	; 0x1b64 <EPD_W21_Write+0x1c>
	_delay_us(5);
	SPI_Write(*ptemp);
    1b68:	f8 01       	movw	r30, r16
    1b6a:	80 81       	ld	r24, Z
    1b6c:	0e 94 21 10 	call	0x2042	; 0x2042 <SPI_Write>
	ptemp++;

	EPD_W21_DC_1;		// data write
    1b70:	c2 9a       	sbi	0x18, 2	; 24
    1b72:	fa 94       	dec	r15
    1b74:	f1 f7       	brne	.-4      	; 0x1b72 <EPD_W21_Write+0x2a>
    1b76:	d0 2e       	mov	r13, r16
    1b78:	e8 01       	movw	r28, r16
	_delay_us(5);
	for (i=0; i<(datalen-1); i++)	// sub the command
    1b7a:	ff 24       	eor	r15, r15
    1b7c:	08 94       	sec
    1b7e:	e1 08       	sbc	r14, r1
    1b80:	f1 08       	sbc	r15, r1
    1b82:	03 c0       	rjmp	.+6      	; 0x1b8a <EPD_W21_Write+0x42>
	{
		SPI_Write(*ptemp);
    1b84:	88 81       	ld	r24, Y
    1b86:	0e 94 21 10 	call	0x2042	; 0x2042 <SPI_Write>
	SPI_Write(*ptemp);
	ptemp++;

	EPD_W21_DC_1;		// data write
	_delay_us(5);
	for (i=0; i<(datalen-1); i++)	// sub the command
    1b8a:	9e 01       	movw	r18, r28
    1b8c:	2d 19       	sub	r18, r13
    1b8e:	82 2f       	mov	r24, r18
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	21 96       	adiw	r28, 0x01	; 1
    1b94:	8e 15       	cp	r24, r14
    1b96:	9f 05       	cpc	r25, r15
    1b98:	ac f3       	brlt	.-22     	; 0x1b84 <EPD_W21_Write+0x3c>
	{
		SPI_Write(*ptemp);
		ptemp++;
	}

	EPD_W21_CS_1;
    1b9a:	c4 9a       	sbi	0x18, 4	; 24

}
    1b9c:	df 91       	pop	r29
    1b9e:	cf 91       	pop	r28
    1ba0:	1f 91       	pop	r17
    1ba2:	0f 91       	pop	r16
    1ba4:	ff 90       	pop	r15
    1ba6:	ef 90       	pop	r14
    1ba8:	df 90       	pop	r13
    1baa:	08 95       	ret

00001bac <EPD_W21_SetRamPointer>:
	EPD_W21_Write(RamAreaX, sizeof(RamAreaX));
	EPD_W21_Write(RamAreaY, sizeof(RamAreaY));
}

static void EPD_W21_SetRamPointer(unsigned char addrX, unsigned char addrY,unsigned char addrY1)
{
    1bac:	df 93       	push	r29
    1bae:	cf 93       	push	r28
    1bb0:	00 d0       	rcall	.+0      	; 0x1bb2 <EPD_W21_SetRamPointer+0x6>
    1bb2:	00 d0       	rcall	.+0      	; 0x1bb4 <EPD_W21_SetRamPointer+0x8>
    1bb4:	0f 92       	push	r0
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
	unsigned char RamPointerX[2];	// default (0,0)
	unsigned char RamPointerY[3];
	RamPointerX[0] = 0x4e;
    1bba:	9e e4       	ldi	r25, 0x4E	; 78
    1bbc:	99 83       	std	Y+1, r25	; 0x01
	RamPointerX[1] = addrX;
    1bbe:	8a 83       	std	Y+2, r24	; 0x02
	RamPointerY[0] = 0x4f;
    1bc0:	8f e4       	ldi	r24, 0x4F	; 79
    1bc2:	8b 83       	std	Y+3, r24	; 0x03
	RamPointerY[1] = addrY;
    1bc4:	6c 83       	std	Y+4, r22	; 0x04
	RamPointerY[2] = addrY1;
    1bc6:	4d 83       	std	Y+5, r20	; 0x05

	EPD_W21_Write(RamPointerX, sizeof(RamPointerX));
    1bc8:	ce 01       	movw	r24, r28
    1bca:	01 96       	adiw	r24, 0x01	; 1
    1bcc:	62 e0       	ldi	r22, 0x02	; 2
    1bce:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <EPD_W21_Write>
	EPD_W21_Write(RamPointerY, sizeof(RamPointerY));
    1bd2:	ce 01       	movw	r24, r28
    1bd4:	03 96       	adiw	r24, 0x03	; 3
    1bd6:	63 e0       	ldi	r22, 0x03	; 3
    1bd8:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <EPD_W21_Write>
}
    1bdc:	0f 90       	pop	r0
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	cf 91       	pop	r28
    1be8:	df 91       	pop	r29
    1bea:	08 95       	ret

00001bec <part_display>:
static void part_display(unsigned char RAM_XST, unsigned char RAM_XEND,
		unsigned char RAM_YST, unsigned char RAM_YST1, unsigned char RAM_YEND,
		unsigned char RAM_YEND1)
{
    1bec:	df 92       	push	r13
    1bee:	ef 92       	push	r14
    1bf0:	ff 92       	push	r15
    1bf2:	0f 93       	push	r16
    1bf4:	1f 93       	push	r17
    1bf6:	df 93       	push	r29
    1bf8:	cf 93       	push	r28
    1bfa:	cd b7       	in	r28, 0x3d	; 61
    1bfc:	de b7       	in	r29, 0x3e	; 62
    1bfe:	28 97       	sbiw	r28, 0x08	; 8
    1c00:	0f b6       	in	r0, 0x3f	; 63
    1c02:	f8 94       	cli
    1c04:	de bf       	out	0x3e, r29	; 62
    1c06:	0f be       	out	0x3f, r0	; 63
    1c08:	cd bf       	out	0x3d, r28	; 61
    1c0a:	d8 2e       	mov	r13, r24
    1c0c:	14 2f       	mov	r17, r20
    1c0e:	f2 2e       	mov	r15, r18
		unsigned char Ystart, unsigned char Ystart1, unsigned char Yend,
		unsigned char Yend1)
{
	unsigned char RamAreaX[3];	// X start and end
	unsigned char RamAreaY[5]; 	// Y start and end
	RamAreaX[0] = 0x44;	// command
    1c10:	84 e4       	ldi	r24, 0x44	; 68
    1c12:	89 83       	std	Y+1, r24	; 0x01
	RamAreaX[1] = Xstart;
    1c14:	da 82       	std	Y+2, r13	; 0x02
	RamAreaX[2] = Xend;
    1c16:	6b 83       	std	Y+3, r22	; 0x03
	RamAreaY[0] = 0x45;	// command
    1c18:	85 e4       	ldi	r24, 0x45	; 69
    1c1a:	8c 83       	std	Y+4, r24	; 0x04
	RamAreaY[1] = Ystart;
    1c1c:	4d 83       	std	Y+5, r20	; 0x05
	RamAreaY[2] = Ystart1;
    1c1e:	2e 83       	std	Y+6, r18	; 0x06
	RamAreaY[3] = Yend;
    1c20:	0f 83       	std	Y+7, r16	; 0x07
	RamAreaY[4] = Yend1;
    1c22:	e8 86       	std	Y+8, r14	; 0x08
	EPD_W21_Write(RamAreaX, sizeof(RamAreaX));
    1c24:	ce 01       	movw	r24, r28
    1c26:	01 96       	adiw	r24, 0x01	; 1
    1c28:	63 e0       	ldi	r22, 0x03	; 3
    1c2a:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <EPD_W21_Write>
	EPD_W21_Write(RamAreaY, sizeof(RamAreaY));
    1c2e:	ce 01       	movw	r24, r28
    1c30:	04 96       	adiw	r24, 0x04	; 4
    1c32:	65 e0       	ldi	r22, 0x05	; 5
    1c34:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <EPD_W21_Write>
static void part_display(unsigned char RAM_XST, unsigned char RAM_XEND,
		unsigned char RAM_YST, unsigned char RAM_YST1, unsigned char RAM_YEND,
		unsigned char RAM_YEND1)
{
	EPD_W21_SetRamArea(RAM_XST, RAM_XEND, RAM_YST, RAM_YST1, RAM_YEND, RAM_YEND1); /*set w h*/
	EPD_W21_SetRamPointer(RAM_XST, RAM_YST, RAM_YST1); /*set orginal*/
    1c38:	8d 2d       	mov	r24, r13
    1c3a:	61 2f       	mov	r22, r17
    1c3c:	4f 2d       	mov	r20, r15
    1c3e:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <EPD_W21_SetRamPointer>
}
    1c42:	28 96       	adiw	r28, 0x08	; 8
    1c44:	0f b6       	in	r0, 0x3f	; 63
    1c46:	f8 94       	cli
    1c48:	de bf       	out	0x3e, r29	; 62
    1c4a:	0f be       	out	0x3f, r0	; 63
    1c4c:	cd bf       	out	0x3d, r28	; 61
    1c4e:	cf 91       	pop	r28
    1c50:	df 91       	pop	r29
    1c52:	1f 91       	pop	r17
    1c54:	0f 91       	pop	r16
    1c56:	ff 90       	pop	r15
    1c58:	ef 90       	pop	r14
    1c5a:	df 90       	pop	r13
    1c5c:	08 95       	ret

00001c5e <EPD_W21_Init>:
	EPD_W21_SetRamArea(0x00, (xDot - 1) / 8, (yDot - 1) % 256, (yDot - 1) / 256, 0x00, 0x00);	// X-source area,Y-gage area
	EPD_W21_SetRamPointer(0x00, (yDot - 1) % 256, (yDot - 1) / 256);// set ram

}
static void EPD_W21_Init(void)
{
    1c5e:	df 93       	push	r29
    1c60:	cf 93       	push	r28
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
    1c66:	28 97       	sbiw	r28, 0x08	; 8
    1c68:	0f b6       	in	r0, 0x3f	; 63
    1c6a:	f8 94       	cli
    1c6c:	de bf       	out	0x3e, r29	; 62
    1c6e:	0f be       	out	0x3f, r0	; 63
    1c70:	cd bf       	out	0x3d, r28	; 61
//	EPD_W21_BS_0;		// 4 wire spi mode selected
	EPD_W21_RST_0;		// Module reset
    1c72:	c1 98       	cbi	0x18, 1	; 24
    1c74:	88 ee       	ldi	r24, 0xE8	; 232
    1c76:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c78:	28 ec       	ldi	r18, 0xC8	; 200
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	f9 01       	movw	r30, r18
    1c7e:	31 97       	sbiw	r30, 0x01	; 1
    1c80:	f1 f7       	brne	.-4      	; 0x1c7e <EPD_W21_Init+0x20>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c82:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c84:	d9 f7       	brne	.-10     	; 0x1c7c <EPD_W21_Init+0x1e>
	_delay_ms(100);
	EPD_W21_RST_1;
    1c86:	c1 9a       	sbi	0x18, 1	; 24
    1c88:	88 ee       	ldi	r24, 0xE8	; 232
    1c8a:	93 e0       	ldi	r25, 0x03	; 3
    1c8c:	28 ec       	ldi	r18, 0xC8	; 200
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	f9 01       	movw	r30, r18
    1c92:	31 97       	sbiw	r30, 0x01	; 1
    1c94:	f1 f7       	brne	.-4      	; 0x1c92 <EPD_W21_Init+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c96:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c98:	d9 f7       	brne	.-10     	; 0x1c90 <EPD_W21_Init+0x32>
//	EPD_W21_Write(VCOMVol, sizeof(VCOMVol));		// VCOM setting
//	EPD_W21_Write(DummyLine, sizeof(DummyLine));	// dummy line per gate
//	EPD_W21_Write(Gatetime, sizeof(Gatetime));		// Gage time setting
//	EPD_W21_Write(RamDataEntryMode, sizeof(RamDataEntryMode));	// X increase, Y decrease

	EPD_W21_Write(GDOControl, sizeof(GDOControl));	// Pannel configuration, Gate selection
    1c9a:	80 e6       	ldi	r24, 0x60	; 96
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	64 e0       	ldi	r22, 0x04	; 4
    1ca0:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <EPD_W21_Write>
	EPD_W21_Write(softstart, sizeof(softstart));	// X decrease, Y decrease
    1ca4:	84 e6       	ldi	r24, 0x64	; 100
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	64 e0       	ldi	r22, 0x04	; 4
    1caa:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <EPD_W21_Write>
	//EPD_W21_Write(Rambypass, sizeof(Rambypass));	// RAM bypass setting
//	EPD_W21_Write(MAsequency, sizeof(MAsequency));	// clock enable
	//EPD_W21_Write(GDVol, sizeof(GDVol));			// Gate voltage setting
	//EPD_W21_Write(SDVol, sizeof(SDVol));			// Source voltage setting
	EPD_W21_Write(VCOMVol, sizeof(VCOMVol));		// VCOM setting
    1cae:	80 e7       	ldi	r24, 0x70	; 112
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	62 e0       	ldi	r22, 0x02	; 2
    1cb4:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <EPD_W21_Write>
	//EPD_W21_Write(BOOSTERFB, sizeof(BOOSTERFB));	// Hi-V feedback selection
	EPD_W21_Write(DummyLine, sizeof(DummyLine));	// dummy line per gate
    1cb8:	84 e7       	ldi	r24, 0x74	; 116
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	62 e0       	ldi	r22, 0x02	; 2
    1cbe:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <EPD_W21_Write>
	EPD_W21_Write(Gatetime, sizeof(Gatetime));		// Gage time setting
    1cc2:	86 e7       	ldi	r24, 0x76	; 118
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	62 e0       	ldi	r22, 0x02	; 2
    1cc8:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <EPD_W21_Write>
	EPD_W21_Write(RamDataEntryMode, sizeof(RamDataEntryMode));// X increase, Y decrease
    1ccc:	8a e7       	ldi	r24, 0x7A	; 122
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	62 e0       	ldi	r22, 0x02	; 2
    1cd2:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <EPD_W21_Write>
		unsigned char Ystart, unsigned char Ystart1, unsigned char Yend,
		unsigned char Yend1)
{
	unsigned char RamAreaX[3];	// X start and end
	unsigned char RamAreaY[5]; 	// Y start and end
	RamAreaX[0] = 0x44;	// command
    1cd6:	84 e4       	ldi	r24, 0x44	; 68
    1cd8:	89 83       	std	Y+1, r24	; 0x01
	RamAreaX[1] = Xstart;
    1cda:	1a 82       	std	Y+2, r1	; 0x02
	RamAreaX[2] = Xend;
    1cdc:	8f e0       	ldi	r24, 0x0F	; 15
    1cde:	8b 83       	std	Y+3, r24	; 0x03
	RamAreaY[0] = 0x45;	// command
    1ce0:	85 e4       	ldi	r24, 0x45	; 69
    1ce2:	8c 83       	std	Y+4, r24	; 0x04
	RamAreaY[1] = Ystart;
    1ce4:	89 ef       	ldi	r24, 0xF9	; 249
    1ce6:	8d 83       	std	Y+5, r24	; 0x05
	RamAreaY[2] = Ystart1;
    1ce8:	1e 82       	std	Y+6, r1	; 0x06
	RamAreaY[3] = Yend;
    1cea:	1f 82       	std	Y+7, r1	; 0x07
	RamAreaY[4] = Yend1;
    1cec:	18 86       	std	Y+8, r1	; 0x08
	EPD_W21_Write(RamAreaX, sizeof(RamAreaX));
    1cee:	ce 01       	movw	r24, r28
    1cf0:	01 96       	adiw	r24, 0x01	; 1
    1cf2:	63 e0       	ldi	r22, 0x03	; 3
    1cf4:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <EPD_W21_Write>
	EPD_W21_Write(RamAreaY, sizeof(RamAreaY));
    1cf8:	ce 01       	movw	r24, r28
    1cfa:	04 96       	adiw	r24, 0x04	; 4
    1cfc:	65 e0       	ldi	r22, 0x05	; 5
    1cfe:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <EPD_W21_Write>
	EPD_W21_Write(DummyLine, sizeof(DummyLine));	// dummy line per gate
	EPD_W21_Write(Gatetime, sizeof(Gatetime));		// Gage time setting
	EPD_W21_Write(RamDataEntryMode, sizeof(RamDataEntryMode));// X increase, Y decrease

	EPD_W21_SetRamArea(0x00, (xDot - 1) / 8, (yDot - 1) % 256, (yDot - 1) / 256, 0x00, 0x00);	// X-source area,Y-gage area
	EPD_W21_SetRamPointer(0x00, (yDot - 1) % 256, (yDot - 1) / 256);// set ram
    1d02:	80 e0       	ldi	r24, 0x00	; 0
    1d04:	69 ef       	ldi	r22, 0xF9	; 249
    1d06:	40 e0       	ldi	r20, 0x00	; 0
    1d08:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <EPD_W21_SetRamPointer>
	EPD_W21_RST_0;		// Module reset
	_delay_ms(100);
	EPD_W21_RST_1;
	_delay_ms(100);
	EPD_W21_DispInit();		// pannel configure
}
    1d0c:	28 96       	adiw	r28, 0x08	; 8
    1d0e:	0f b6       	in	r0, 0x3f	; 63
    1d10:	f8 94       	cli
    1d12:	de bf       	out	0x3e, r29	; 62
    1d14:	0f be       	out	0x3f, r0	; 63
    1d16:	cd bf       	out	0x3d, r28	; 61
    1d18:	cf 91       	pop	r28
    1d1a:	df 91       	pop	r29
    1d1c:	08 95       	ret

00001d1e <EPD_init_Part>:
	//_delay_ms(100000);
}

void EPD_init_Part(void)
{
	EPD_W21_Init();			// display
    1d1e:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <EPD_W21_Init>
//Author: 
//Date	: 2011/12/24
//-------------------------------------------------------
static void EPD_W21_WirteLUT(unsigned char *LUTvalue, unsigned char Size)
{
	EPD_W21_Write(LUTvalue, Size);
    1d22:	8a e9       	ldi	r24, 0x9A	; 154
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	6e e1       	ldi	r22, 0x1E	; 30
    1d28:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <EPD_W21_Write>
void EPD_init_Part(void)
{
	EPD_W21_Init();			// display

	EPD_W21_WirteLUT((unsigned char *) LUTDefault_part, sizeof(LUTDefault_part));
	EPD_W21_POWERON();
    1d2c:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <EPD_W21_POWERON>
//	part_display(0,xDot/8,yDot%256,yDot/256,0,0);
//	EPD_W21_WriteDispRamMono(xDot, yDot, 0xff);	// white	

	//_delay_ms(2500);

}
    1d30:	08 95       	ret

00001d32 <EPD_init_Full>:

void EPD_init_Full(void)
{
	//_delay_ms(4900);
	//_delay_ms(100000);
	EPD_W21_Init();			// display
    1d32:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <EPD_W21_Init>
//Author: 
//Date	: 2011/12/24
//-------------------------------------------------------
static void EPD_W21_WirteLUT(unsigned char *LUTvalue, unsigned char Size)
{
	EPD_W21_Write(LUTvalue, Size);
    1d36:	8c e7       	ldi	r24, 0x7C	; 124
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	6e e1       	ldi	r22, 0x1E	; 30
    1d3c:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <EPD_W21_Write>
	//_delay_ms(4900);
	//_delay_ms(100000);
	EPD_W21_Init();			// display
	EPD_W21_WirteLUT((unsigned char *) LUTDefault_full,sizeof(LUTDefault_full));

	EPD_W21_POWERON();
    1d40:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <EPD_W21_POWERON>
	//_delay_ms(100000);
}
    1d44:	08 95       	ret

00001d46 <EPD_W21_WriteDispRam>:
	EPD_W21_CS_1;

}

static void EPD_W21_WriteDispRam(unsigned char XSize, unsigned int YSize, unsigned char *Dispbuff)
{
    1d46:	6f 92       	push	r6
    1d48:	7f 92       	push	r7
    1d4a:	8f 92       	push	r8
    1d4c:	9f 92       	push	r9
    1d4e:	af 92       	push	r10
    1d50:	bf 92       	push	r11
    1d52:	cf 92       	push	r12
    1d54:	df 92       	push	r13
    1d56:	ef 92       	push	r14
    1d58:	ff 92       	push	r15
    1d5a:	0f 93       	push	r16
    1d5c:	1f 93       	push	r17
    1d5e:	cf 93       	push	r28
    1d60:	df 93       	push	r29
    1d62:	28 2f       	mov	r18, r24
    1d64:	3b 01       	movw	r6, r22
    1d66:	04 2f       	mov	r16, r20
    1d68:	f5 2e       	mov	r15, r21
	int i=0, j=0;

	if((XSize%8) != 0)
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	87 70       	andi	r24, 0x07	; 7
    1d6e:	90 70       	andi	r25, 0x00	; 0
    1d70:	89 2b       	or	r24, r25
    1d72:	11 f0       	breq	.+4      	; 0x1d78 <EPD_W21_WriteDispRam+0x32>
	{
		XSize = XSize + (8 - (XSize%8));
    1d74:	28 7f       	andi	r18, 0xF8	; 248
    1d76:	28 5f       	subi	r18, 0xF8	; 248
	}
	XSize /= 8;
    1d78:	12 2f       	mov	r17, r18
    1d7a:	16 95       	lsr	r17
    1d7c:	16 95       	lsr	r17
    1d7e:	16 95       	lsr	r17
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	40 e2       	ldi	r20, 0x20	; 32
    1d86:	5e e4       	ldi	r21, 0x4E	; 78
static unsigned char ReadBusy(void)
{
	unsigned long i = 0;
	for (i = 0; i < 400; i++)
	{
		if (isEPD_W21_BUSY == EPD_W21_BUSY_LEVEL)
    1d88:	b0 9b       	sbis	0x16, 0	; 22
    1d8a:	09 c0       	rjmp	.+18     	; 0x1d9e <EPD_W21_WriteDispRam+0x58>
    1d8c:	ca 01       	movw	r24, r20
    1d8e:	01 97       	sbiw	r24, 0x01	; 1
    1d90:	f1 f7       	brne	.-4      	; 0x1d8e <EPD_W21_WriteDispRam+0x48>
    1d92:	2f 5f       	subi	r18, 0xFF	; 255
    1d94:	3f 4f       	sbci	r19, 0xFF	; 255
};

static unsigned char ReadBusy(void)
{
	unsigned long i = 0;
	for (i = 0; i < 400; i++)
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	20 39       	cpi	r18, 0x90	; 144
    1d9a:	38 07       	cpc	r19, r24
    1d9c:	a9 f7       	brne	.-22     	; 0x1d88 <EPD_W21_WriteDispRam+0x42>
	XSize /= 8;

	//while(isEPD_W21_BUSY == 1);	//wait
	ReadBusy();

	EPD_W21_CS_0;
    1d9e:	c4 98       	cbi	0x18, 4	; 24
	EPD_W21_DC_0;		//command write
    1da0:	c2 98       	cbi	0x18, 2	; 24
	SPI_Write(0x24);
    1da2:	84 e2       	ldi	r24, 0x24	; 36
    1da4:	0e 94 21 10 	call	0x2042	; 0x2042 <SPI_Write>

	EPD_W21_DC_1;		//data write
    1da8:	c2 9a       	sbi	0x18, 2	; 24
    1daa:	81 2e       	mov	r8, r17
    1dac:	99 24       	eor	r9, r9
    1dae:	80 2f       	mov	r24, r16
    1db0:	9f 2d       	mov	r25, r15
    1db2:	9c 01       	movw	r18, r24
    1db4:	79 01       	movw	r14, r18
    1db6:	00 e0       	ldi	r16, 0x00	; 0
    1db8:	10 e0       	ldi	r17, 0x00	; 0
	for(i=0; i<YSize; i++)
	{
		for(j = 0; j < XSize; j++)
    1dba:	54 01       	movw	r10, r8
    1dbc:	0d c0       	rjmp	.+26     	; 0x1dd8 <EPD_W21_WriteDispRam+0x92>
			SPI_Write(Dispbuff[i*XSize+j]);
    1dbe:	f6 01       	movw	r30, r12
    1dc0:	81 91       	ld	r24, Z+
    1dc2:	6f 01       	movw	r12, r30
    1dc4:	0e 94 21 10 	call	0x2042	; 0x2042 <SPI_Write>
	SPI_Write(0x24);

	EPD_W21_DC_1;		//data write
	for(i=0; i<YSize; i++)
	{
		for(j = 0; j < XSize; j++)
    1dc8:	21 96       	adiw	r28, 0x01	; 1
    1dca:	ca 15       	cp	r28, r10
    1dcc:	db 05       	cpc	r29, r11
    1dce:	bc f3       	brlt	.-18     	; 0x1dbe <EPD_W21_WriteDispRam+0x78>
	EPD_W21_CS_0;
	EPD_W21_DC_0;		//command write
	SPI_Write(0x24);

	EPD_W21_DC_1;		//data write
	for(i=0; i<YSize; i++)
    1dd0:	0f 5f       	subi	r16, 0xFF	; 255
    1dd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd4:	e8 0c       	add	r14, r8
    1dd6:	f9 1c       	adc	r15, r9
    1dd8:	06 15       	cp	r16, r6
    1dda:	17 05       	cpc	r17, r7
    1ddc:	20 f4       	brcc	.+8      	; 0x1de6 <EPD_W21_WriteDispRam+0xa0>
	{
		for(j = 0; j < XSize; j++)
    1dde:	67 01       	movw	r12, r14
    1de0:	c0 e0       	ldi	r28, 0x00	; 0
    1de2:	d0 e0       	ldi	r29, 0x00	; 0
    1de4:	f2 cf       	rjmp	.-28     	; 0x1dca <EPD_W21_WriteDispRam+0x84>
			SPI_Write(Dispbuff[i*XSize+j]);
	}

	EPD_W21_CS_1;
    1de6:	c4 9a       	sbi	0x18, 4	; 24
}
    1de8:	df 91       	pop	r29
    1dea:	cf 91       	pop	r28
    1dec:	1f 91       	pop	r17
    1dee:	0f 91       	pop	r16
    1df0:	ff 90       	pop	r15
    1df2:	ef 90       	pop	r14
    1df4:	df 90       	pop	r13
    1df6:	cf 90       	pop	r12
    1df8:	bf 90       	pop	r11
    1dfa:	af 90       	pop	r10
    1dfc:	9f 90       	pop	r9
    1dfe:	8f 90       	pop	r8
    1e00:	7f 90       	pop	r7
    1e02:	6f 90       	pop	r6
    1e04:	08 95       	ret

00001e06 <EPD_Dis_Part>:


void EPD_Dis_Part(unsigned char xStart, unsigned char xEnd,
		unsigned long yStart, unsigned long yEnd, unsigned char *DisBuffer,
		unsigned char Label)
{
    1e06:	2f 92       	push	r2
    1e08:	3f 92       	push	r3
    1e0a:	4f 92       	push	r4
    1e0c:	5f 92       	push	r5
    1e0e:	6f 92       	push	r6
    1e10:	7f 92       	push	r7
    1e12:	8f 92       	push	r8
    1e14:	9f 92       	push	r9
    1e16:	af 92       	push	r10
    1e18:	bf 92       	push	r11
    1e1a:	cf 92       	push	r12
    1e1c:	df 92       	push	r13
    1e1e:	ef 92       	push	r14
    1e20:	ff 92       	push	r15
    1e22:	0f 93       	push	r16
    1e24:	1f 93       	push	r17
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
    1e2e:	61 97       	sbiw	r28, 0x11	; 17
    1e30:	0f b6       	in	r0, 0x3f	; 63
    1e32:	f8 94       	cli
    1e34:	de bf       	out	0x3e, r29	; 62
    1e36:	0f be       	out	0x3f, r0	; 63
    1e38:	cd bf       	out	0x3d, r28	; 61
    1e3a:	98 2f       	mov	r25, r24
    1e3c:	b6 2e       	mov	r11, r22
    1e3e:	19 01       	movw	r2, r18
    1e40:	2a 01       	movw	r4, r20
    1e42:	37 01       	movw	r6, r14
    1e44:	48 01       	movw	r8, r16
    1e46:	d9 8a       	std	Y+17, r13	; 0x11
    1e48:	c8 8a       	std	Y+16, r12	; 0x10
    1e4a:	8a 2d       	mov	r24, r10
	if (Label == 0)
    1e4c:	aa 20       	and	r10, r10
    1e4e:	09 f0       	breq	.+2      	; 0x1e52 <EPD_Dis_Part+0x4c>
    1e50:	48 c0       	rjmp	.+144    	; 0x1ee2 <EPD_Dis_Part+0xdc>
	{
		part_display(xStart / 8, xEnd / 8, yEnd % 256, yEnd / 256, yStart % 256,yStart / 256);
    1e52:	29 2f       	mov	r18, r25
    1e54:	26 95       	lsr	r18
    1e56:	26 95       	lsr	r18
    1e58:	26 95       	lsr	r18
    1e5a:	2b 87       	std	Y+11, r18	; 0x0b
    1e5c:	a6 2e       	mov	r10, r22
    1e5e:	a6 94       	lsr	r10
    1e60:	a6 94       	lsr	r10
    1e62:	a6 94       	lsr	r10
    1e64:	ea 86       	std	Y+10, r14	; 0x0a
    1e66:	33 27       	eor	r19, r19
    1e68:	21 2f       	mov	r18, r17
    1e6a:	10 2f       	mov	r17, r16
    1e6c:	0f 2d       	mov	r16, r15
    1e6e:	09 87       	std	Y+9, r16	; 0x09
    1e70:	12 2d       	mov	r17, r2
    1e72:	ff 24       	eor	r15, r15
    1e74:	e5 2c       	mov	r14, r5
    1e76:	d4 2c       	mov	r13, r4
    1e78:	c3 2c       	mov	r12, r3
    1e7a:	fc 2c       	mov	r15, r12
    1e7c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e7e:	6a 2d       	mov	r22, r10
    1e80:	46 2d       	mov	r20, r6
    1e82:	20 2f       	mov	r18, r16
    1e84:	02 2d       	mov	r16, r2
    1e86:	ec 2c       	mov	r14, r12
    1e88:	9f 87       	std	Y+15, r25	; 0x0f
    1e8a:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <part_display>
		EPD_W21_WriteDispRamMono(xEnd - xStart, yEnd - yStart + 1,DisBuffer[0]);	// black
    1e8e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1e90:	b9 1a       	sub	r11, r25
    1e92:	63 01       	movw	r12, r6
    1e94:	c2 18       	sub	r12, r2
    1e96:	d3 08       	sbc	r13, r3
    1e98:	08 94       	sec
    1e9a:	c1 1c       	adc	r12, r1
    1e9c:	d1 1c       	adc	r13, r1
    1e9e:	8b 2d       	mov	r24, r11
    1ea0:	b6 01       	movw	r22, r12
    1ea2:	e8 89       	ldd	r30, Y+16	; 0x10
    1ea4:	f9 89       	ldd	r31, Y+17	; 0x11
    1ea6:	40 81       	ld	r20, Z
    1ea8:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <EPD_W21_WriteDispRamMono>
		EPD_W21_Update_Part();
    1eac:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <EPD_W21_Update_Part>
    1eb0:	80 ed       	ldi	r24, 0xD0	; 208
    1eb2:	97 e0       	ldi	r25, 0x07	; 7
    1eb4:	28 ec       	ldi	r18, 0xC8	; 200
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	f9 01       	movw	r30, r18
    1eba:	31 97       	sbiw	r30, 0x01	; 1
    1ebc:	f1 f7       	brne	.-4      	; 0x1eba <EPD_Dis_Part+0xb4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ebe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec0:	d9 f7       	brne	.-10     	; 0x1eb8 <EPD_Dis_Part+0xb2>
		_delay_ms(200);
		part_display(xStart / 8, xEnd / 8, yEnd % 256, yEnd / 256, yStart % 256,yStart / 256);
    1ec2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ec4:	6a 2d       	mov	r22, r10
    1ec6:	4a 85       	ldd	r20, Y+10	; 0x0a
    1ec8:	29 85       	ldd	r18, Y+9	; 0x09
    1eca:	01 2f       	mov	r16, r17
    1ecc:	ef 2c       	mov	r14, r15
    1ece:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <part_display>
		EPD_W21_WriteDispRamMono(xEnd - xStart, yEnd - yStart + 1,DisBuffer[0]);	// black
    1ed2:	8b 2d       	mov	r24, r11
    1ed4:	b6 01       	movw	r22, r12
    1ed6:	e8 89       	ldd	r30, Y+16	; 0x10
    1ed8:	f9 89       	ldd	r31, Y+17	; 0x11
    1eda:	40 81       	ld	r20, Z
    1edc:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <EPD_W21_WriteDispRamMono>
    1ee0:	70 c0       	rjmp	.+224    	; 0x1fc2 <EPD_Dis_Part+0x1bc>
    1ee2:	f9 2f       	mov	r31, r25
    1ee4:	f6 95       	lsr	r31
    1ee6:	f6 95       	lsr	r31
    1ee8:	f6 95       	lsr	r31
    1eea:	fc 87       	std	Y+12, r31	; 0x0c
    1eec:	26 2f       	mov	r18, r22
    1eee:	26 95       	lsr	r18
    1ef0:	26 95       	lsr	r18
    1ef2:	26 95       	lsr	r18
    1ef4:	2d 87       	std	Y+13, r18	; 0x0d
    1ef6:	33 27       	eor	r19, r19
    1ef8:	21 2f       	mov	r18, r17
    1efa:	10 2f       	mov	r17, r16
    1efc:	0f 2d       	mov	r16, r15
    1efe:	ff 24       	eor	r15, r15
    1f00:	e5 2c       	mov	r14, r5
    1f02:	d4 2c       	mov	r13, r4
    1f04:	c3 2c       	mov	r12, r3
    1f06:	b9 1a       	sub	r11, r25
    1f08:	be 86       	std	Y+14, r11	; 0x0e
    1f0a:	53 01       	movw	r10, r6
    1f0c:	a2 18       	sub	r10, r2
    1f0e:	b3 08       	sbc	r11, r3
		//_delay_ms(200);	
	}
	else if (Label == 1)
    1f10:	81 30       	cpi	r24, 0x01	; 1
    1f12:	41 f5       	brne	.+80     	; 0x1f64 <EPD_Dis_Part+0x15e>
	{
		part_display(xStart/8, xEnd/8, yEnd%256, yEnd/256, yStart%256,yStart/256);	// set ram
    1f14:	68 86       	std	Y+8, r6	; 0x08
    1f16:	0f 83       	std	Y+7, r16	; 0x07
    1f18:	2e 82       	std	Y+6, r2	; 0x06
    1f1a:	cd 82       	std	Y+5, r12	; 0x05
    1f1c:	8f 2f       	mov	r24, r31
    1f1e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1f20:	46 2d       	mov	r20, r6
    1f22:	20 2f       	mov	r18, r16
    1f24:	02 2d       	mov	r16, r2
    1f26:	ec 2c       	mov	r14, r12
    1f28:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <part_display>
		EPD_W21_WriteDispRam(xEnd - xStart, yEnd - yStart + 1, DisBuffer);
    1f2c:	65 01       	movw	r12, r10
    1f2e:	08 94       	sec
    1f30:	c1 1c       	adc	r12, r1
    1f32:	d1 1c       	adc	r13, r1
    1f34:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f36:	b6 01       	movw	r22, r12
    1f38:	48 89       	ldd	r20, Y+16	; 0x10
    1f3a:	59 89       	ldd	r21, Y+17	; 0x11
    1f3c:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <EPD_W21_WriteDispRam>
		EPD_W21_Update_Part();
    1f40:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <EPD_W21_Update_Part>
    1f44:	88 eb       	ldi	r24, 0xB8	; 184
    1f46:	9b e0       	ldi	r25, 0x0B	; 11
    1f48:	28 ec       	ldi	r18, 0xC8	; 200
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	f9 01       	movw	r30, r18
    1f4e:	31 97       	sbiw	r30, 0x01	; 1
    1f50:	f1 f7       	brne	.-4      	; 0x1f4e <EPD_Dis_Part+0x148>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f52:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f54:	d9 f7       	brne	.-10     	; 0x1f4c <EPD_Dis_Part+0x146>
		_delay_ms(300);
		part_display(xStart/8, xEnd/8, yEnd%256, yEnd/256, yStart%256,yStart/256);
    1f56:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f58:	6d 85       	ldd	r22, Y+13	; 0x0d
    1f5a:	48 85       	ldd	r20, Y+8	; 0x08
    1f5c:	2f 81       	ldd	r18, Y+7	; 0x07
    1f5e:	0e 81       	ldd	r16, Y+6	; 0x06
    1f60:	ed 80       	ldd	r14, Y+5	; 0x05
    1f62:	27 c0       	rjmp	.+78     	; 0x1fb2 <EPD_Dis_Part+0x1ac>
		EPD_W21_WriteDispRam(xEnd - xStart, yEnd - yStart + 1, DisBuffer);
		//_delay_ms(300);
	}
	else
	{
		part_display(xStart / 8, xEnd / 8, yEnd % 256, yEnd / 256, yStart % 256,yStart / 256);	// set ram
    1f64:	6c 82       	std	Y+4, r6	; 0x04
    1f66:	0b 83       	std	Y+3, r16	; 0x03
    1f68:	2a 82       	std	Y+2, r2	; 0x02
    1f6a:	c9 82       	std	Y+1, r12	; 0x01
    1f6c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f6e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1f70:	46 2d       	mov	r20, r6
    1f72:	20 2f       	mov	r18, r16
    1f74:	02 2d       	mov	r16, r2
    1f76:	ec 2c       	mov	r14, r12
    1f78:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <part_display>
		EPD_W21_WriteDispRam(xEnd - xStart, yEnd - yStart + 1, DisBuffer);
    1f7c:	65 01       	movw	r12, r10
    1f7e:	08 94       	sec
    1f80:	c1 1c       	adc	r12, r1
    1f82:	d1 1c       	adc	r13, r1
    1f84:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f86:	b6 01       	movw	r22, r12
    1f88:	48 89       	ldd	r20, Y+16	; 0x10
    1f8a:	59 89       	ldd	r21, Y+17	; 0x11
    1f8c:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <EPD_W21_WriteDispRam>
		EPD_W21_Update_Part();
    1f90:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <EPD_W21_Update_Part>
    1f94:	80 ed       	ldi	r24, 0xD0	; 208
    1f96:	97 e0       	ldi	r25, 0x07	; 7
    1f98:	28 ec       	ldi	r18, 0xC8	; 200
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	f9 01       	movw	r30, r18
    1f9e:	31 97       	sbiw	r30, 0x01	; 1
    1fa0:	f1 f7       	brne	.-4      	; 0x1f9e <EPD_Dis_Part+0x198>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa4:	d9 f7       	brne	.-10     	; 0x1f9c <EPD_Dis_Part+0x196>
		_delay_ms(200);
		part_display(xStart / 8, xEnd / 8, yEnd % 256, yEnd / 256, yStart % 256,yStart / 256);
    1fa6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1fa8:	6d 85       	ldd	r22, Y+13	; 0x0d
    1faa:	4c 81       	ldd	r20, Y+4	; 0x04
    1fac:	2b 81       	ldd	r18, Y+3	; 0x03
    1fae:	0a 81       	ldd	r16, Y+2	; 0x02
    1fb0:	e9 80       	ldd	r14, Y+1	; 0x01
    1fb2:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <part_display>
		EPD_W21_WriteDispRam(xEnd - xStart, yEnd - yStart + 1, DisBuffer);
    1fb6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fb8:	b6 01       	movw	r22, r12
    1fba:	48 89       	ldd	r20, Y+16	; 0x10
    1fbc:	59 89       	ldd	r21, Y+17	; 0x11
    1fbe:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <EPD_W21_WriteDispRam>
		//_delay_ms(300);
	}
}
    1fc2:	61 96       	adiw	r28, 0x11	; 17
    1fc4:	0f b6       	in	r0, 0x3f	; 63
    1fc6:	f8 94       	cli
    1fc8:	de bf       	out	0x3e, r29	; 62
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	cd bf       	out	0x3d, r28	; 61
    1fce:	cf 91       	pop	r28
    1fd0:	df 91       	pop	r29
    1fd2:	1f 91       	pop	r17
    1fd4:	0f 91       	pop	r16
    1fd6:	ff 90       	pop	r15
    1fd8:	ef 90       	pop	r14
    1fda:	df 90       	pop	r13
    1fdc:	cf 90       	pop	r12
    1fde:	bf 90       	pop	r11
    1fe0:	af 90       	pop	r10
    1fe2:	9f 90       	pop	r9
    1fe4:	8f 90       	pop	r8
    1fe6:	7f 90       	pop	r7
    1fe8:	6f 90       	pop	r6
    1fea:	5f 90       	pop	r5
    1fec:	4f 90       	pop	r4
    1fee:	3f 90       	pop	r3
    1ff0:	2f 90       	pop	r2
    1ff2:	08 95       	ret

00001ff4 <EPD_Dis_Full>:

}


void EPD_Dis_Full(unsigned char *DisBuffer, unsigned char Label)
{
    1ff4:	1f 93       	push	r17
    1ff6:	cf 93       	push	r28
    1ff8:	df 93       	push	r29
    1ffa:	ec 01       	movw	r28, r24
    1ffc:	16 2f       	mov	r17, r22
	EPD_W21_SetRamPointer(0x00, (yDot - 1) % 256, (yDot - 1) / 256);// set ram
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	69 ef       	ldi	r22, 0xF9	; 249
    2002:	40 e0       	ldi	r20, 0x00	; 0
    2004:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <EPD_W21_SetRamPointer>
	if (Label == 0)
    2008:	11 23       	and	r17, r17
    200a:	39 f4       	brne	.+14     	; 0x201a <EPD_Dis_Full+0x26>
	{
		EPD_W21_WriteDispRamMono(xDot, yDot, 0xff);	// white	
    200c:	80 e8       	ldi	r24, 0x80	; 128
    200e:	6a ef       	ldi	r22, 0xFA	; 250
    2010:	70 e0       	ldi	r23, 0x00	; 0
    2012:	4f ef       	ldi	r20, 0xFF	; 255
    2014:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <EPD_W21_WriteDispRamMono>
    2018:	06 c0       	rjmp	.+12     	; 0x2026 <EPD_Dis_Full+0x32>
	}
	else
	{
		EPD_W21_WriteDispRam(xDot, yDot, (unsigned char *) DisBuffer);	// white
    201a:	80 e8       	ldi	r24, 0x80	; 128
    201c:	6a ef       	ldi	r22, 0xFA	; 250
    201e:	70 e0       	ldi	r23, 0x00	; 0
    2020:	ae 01       	movw	r20, r28
    2022:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <EPD_W21_WriteDispRam>
//Author: 
//Date	: 2011/12/24
//-------------------------------------------------------
static void EPD_W21_Update(void)
{
	EPD_W21_WriteCMD_p1(0x22, 0xc4);
    2026:	82 e2       	ldi	r24, 0x22	; 34
    2028:	64 ec       	ldi	r22, 0xC4	; 196
    202a:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <EPD_W21_WriteCMD_p1>
	EPD_W21_WriteCMD(0x20);
    202e:	80 e2       	ldi	r24, 0x20	; 32
    2030:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <EPD_W21_WriteCMD>
	EPD_W21_WriteCMD(0xff);
    2034:	8f ef       	ldi	r24, 0xFF	; 255
    2036:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <EPD_W21_WriteCMD>
	else
	{
		EPD_W21_WriteDispRam(xDot, yDot, (unsigned char *) DisBuffer);	// white
	}
	EPD_W21_Update();
}
    203a:	df 91       	pop	r29
    203c:	cf 91       	pop	r28
    203e:	1f 91       	pop	r17
    2040:	08 95       	ret

00002042 <SPI_Write>:
#include "Display_EPD_W21_Aux.h"

void SPI_Write(unsigned char value)                                    
{                                                           
    2042:	20 e0       	ldi	r18, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2044:	3d e0       	ldi	r19, 0x0D	; 13
    unsigned char i;
    for(i=0; i<8; i++)   
    {
        EPD_W21_CLK_0;
    2046:	c7 98       	cbi	0x18, 7	; 24
        if(value & 0x80)
    2048:	87 ff       	sbrs	r24, 7
    204a:	02 c0       	rjmp	.+4      	; 0x2050 <SPI_Write+0xe>
        	EPD_W21_MOSI_1;
    204c:	c5 9a       	sbi	0x18, 5	; 24
    204e:	01 c0       	rjmp	.+2      	; 0x2052 <SPI_Write+0x10>
        else
        	EPD_W21_MOSI_0;	
    2050:	c5 98       	cbi	0x18, 5	; 24
    2052:	93 2f       	mov	r25, r19
    2054:	9a 95       	dec	r25
    2056:	f1 f7       	brne	.-4      	; 0x2054 <SPI_Write+0x12>
        value = (value << 1);
		_delay_us(5);
        EPD_W21_CLK_1;
    2058:	c7 9a       	sbi	0x18, 7	; 24
    205a:	93 2f       	mov	r25, r19
    205c:	9a 95       	dec	r25
    205e:	f1 f7       	brne	.-4      	; 0x205c <SPI_Write+0x1a>
#include "Display_EPD_W21_Aux.h"

void SPI_Write(unsigned char value)                                    
{                                                           
    unsigned char i;
    for(i=0; i<8; i++)   
    2060:	2f 5f       	subi	r18, 0xFF	; 255
    2062:	28 30       	cpi	r18, 0x08	; 8
    2064:	11 f0       	breq	.+4      	; 0x206a <SPI_Write+0x28>
        EPD_W21_CLK_0;
        if(value & 0x80)
        	EPD_W21_MOSI_1;
        else
        	EPD_W21_MOSI_0;	
        value = (value << 1);
    2066:	88 0f       	add	r24, r24
    2068:	ee cf       	rjmp	.-36     	; 0x2046 <SPI_Write+0x4>
    206a:	08 95       	ret

0000206c <PortInit>:
#include "main.h"
#include "Display_EPD_W21.h"
#include "ziku.h"
void PortInit(void)
{
    DDRA = 0B00001000;
    206c:	88 e0       	ldi	r24, 0x08	; 8
    206e:	8a bb       	out	0x1a, r24	; 26
    PORTA= 0B00000000;
    2070:	1b ba       	out	0x1b, r1	; 27
    PINA = 0x00;
    2072:	19 ba       	out	0x19, r1	; 25
	
    DDRB = 0B10110110;		// PB1->RES	PB2->D/C PB0->BUSY PB5->SDI PB4->CS PB7->CLK
    2074:	86 eb       	ldi	r24, 0xB6	; 182
    2076:	87 bb       	out	0x17, r24	; 23
    PORTB= 0B00000000;
    2078:	18 ba       	out	0x18, r1	; 24
    PINB = 0x00;
    207a:	16 ba       	out	0x16, r1	; 22

    DDRD = 0B00000000;		// PD5->RES	PD6->D/C PD7->BUSY PD4->SDI PD3->CS PD2->CLK
    207c:	11 ba       	out	0x11, r1	; 17
    PORTD= 0B00000000;
    207e:	12 ba       	out	0x12, r1	; 18
    PIND = 0x00;
    2080:	10 ba       	out	0x10, r1	; 16

    DDRC = 0B00000000;
    2082:	14 ba       	out	0x14, r1	; 20
    PORTC= 0B00000000;
    2084:	15 ba       	out	0x15, r1	; 21
    PINC = 0x00;
    2086:	13 ba       	out	0x13, r1	; 19
}
    2088:	08 95       	ret

0000208a <main>:
#define DELAYTIME 2000
#define xDot 128
#define yDot 250

int main(void)
{
    208a:	8f 92       	push	r8
    208c:	9f 92       	push	r9
    208e:	af 92       	push	r10
    2090:	bf 92       	push	r11
    2092:	cf 92       	push	r12
    2094:	df 92       	push	r13
    2096:	ef 92       	push	r14
    2098:	ff 92       	push	r15
    209a:	0f 93       	push	r16
    209c:	1f 93       	push	r17
    209e:	df 93       	push	r29
    20a0:	cf 93       	push	r28
    20a2:	00 d0       	rcall	.+0      	; 0x20a4 <main+0x1a>
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
 	unsigned int i,m;
 	PortInit();
    20a8:	0e 94 36 10 	call	0x206c	; 0x206c <PortInit>
	EPD_init_Full();
    20ac:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <EPD_init_Full>
    20b0:	88 e8       	ldi	r24, 0x88	; 136
    20b2:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20b4:	28 ec       	ldi	r18, 0xC8	; 200
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	f9 01       	movw	r30, r18
    20ba:	31 97       	sbiw	r30, 0x01	; 1
    20bc:	f1 f7       	brne	.-4      	; 0x20ba <main+0x30>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20be:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c0:	d9 f7       	brne	.-10     	; 0x20b8 <main+0x2e>
	_delay_ms(500);
	m = 0xFF;
    20c2:	8f ef       	ldi	r24, 0xFF	; 255
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	9a 83       	std	Y+2, r25	; 0x02
    20c8:	89 83       	std	Y+1, r24	; 0x01
	EPD_Dis_Full((unsigned char *)&m,0x00);  //all white
    20ca:	ce 01       	movw	r24, r28
    20cc:	01 96       	adiw	r24, 0x01	; 1
    20ce:	60 e0       	ldi	r22, 0x00	; 0
    20d0:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <EPD_Dis_Full>
    20d4:	80 e4       	ldi	r24, 0x40	; 64
    20d6:	9c e9       	ldi	r25, 0x9C	; 156
    20d8:	28 ec       	ldi	r18, 0xC8	; 200
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	f9 01       	movw	r30, r18
    20de:	31 97       	sbiw	r30, 0x01	; 1
    20e0:	f1 f7       	brne	.-4      	; 0x20de <main+0x54>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e4:	d9 f7       	brne	.-10     	; 0x20dc <main+0x52>

    EPD_init_Part();
	_delay_ms(200);
    EPD_Dis_Part(0,xDot-1,0,yDot-1,(unsigned char *)logo,1);
	*/
	EPD_init_Part();
    20e6:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <EPD_init_Part>
    20ea:	80 e1       	ldi	r24, 0x10	; 16
    20ec:	97 e2       	ldi	r25, 0x27	; 39
    20ee:	28 ec       	ldi	r18, 0xC8	; 200
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	f9 01       	movw	r30, r18
    20f4:	31 97       	sbiw	r30, 0x01	; 1
    20f6:	f1 f7       	brne	.-4      	; 0x20f4 <main+0x6a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20fa:	d9 f7       	brne	.-10     	; 0x20f2 <main+0x68>
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	90 e0       	ldi	r25, 0x00	; 0
	for(i=0; i<648; i++)
		num[i] = pgm_read_byte(d+i);
	EPD_Dis_Part(32,103,0,71,num,1);
	*/
	for(i=0; i<240; i++)
		num[i] = pgm_read_byte(gImage_t48+i);
    2100:	fc 01       	movw	r30, r24
    2102:	ec 5a       	subi	r30, 0xAC	; 172
    2104:	ff 4f       	sbci	r31, 0xFF	; 255
    2106:	e4 91       	lpm	r30, Z+
    2108:	dc 01       	movw	r26, r24
    210a:	ac 56       	subi	r26, 0x6C	; 108
    210c:	be 4f       	sbci	r27, 0xFE	; 254
    210e:	ec 93       	st	X, r30
	/*
	for(i=0; i<648; i++)
		num[i] = pgm_read_byte(d+i);
	EPD_Dis_Part(32,103,0,71,num,1);
	*/
	for(i=0; i<240; i++)
    2110:	01 96       	adiw	r24, 0x01	; 1
    2112:	80 3f       	cpi	r24, 0xF0	; 240
    2114:	91 05       	cpc	r25, r1
    2116:	a1 f7       	brne	.-24     	; 0x2100 <main+0x76>
		num[i] = pgm_read_byte(gImage_t48+i);
	EPD_Dis_Part(64,111,0,39,num,1);
    2118:	80 e4       	ldi	r24, 0x40	; 64
    211a:	6f e6       	ldi	r22, 0x6F	; 111
    211c:	20 e0       	ldi	r18, 0x00	; 0
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	40 e0       	ldi	r20, 0x00	; 0
    2122:	50 e0       	ldi	r21, 0x00	; 0
    2124:	f7 e2       	ldi	r31, 0x27	; 39
    2126:	ef 2e       	mov	r14, r31
    2128:	f1 2c       	mov	r15, r1
    212a:	01 2d       	mov	r16, r1
    212c:	11 2d       	mov	r17, r1
    212e:	e4 e9       	ldi	r30, 0x94	; 148
    2130:	ce 2e       	mov	r12, r30
    2132:	e1 e0       	ldi	r30, 0x01	; 1
    2134:	de 2e       	mov	r13, r30
    2136:	aa 24       	eor	r10, r10
    2138:	a3 94       	inc	r10
    213a:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <EPD_Dis_Part>
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	90 e0       	ldi	r25, 0x00	; 0

	for(i=0; i<415; i++)
		num[i] = pgm_read_byte(gImage_DC6+i);
    2142:	fc 01       	movw	r30, r24
    2144:	ec 5b       	subi	r30, 0xBC	; 188
    2146:	fe 4f       	sbci	r31, 0xFE	; 254
    2148:	e4 91       	lpm	r30, Z+
    214a:	dc 01       	movw	r26, r24
    214c:	ac 56       	subi	r26, 0x6C	; 108
    214e:	be 4f       	sbci	r27, 0xFE	; 254
    2150:	ec 93       	st	X, r30
	*/
	for(i=0; i<240; i++)
		num[i] = pgm_read_byte(gImage_t48+i);
	EPD_Dis_Part(64,111,0,39,num,1);

	for(i=0; i<415; i++)
    2152:	01 96       	adiw	r24, 0x01	; 1
    2154:	21 e0       	ldi	r18, 0x01	; 1
    2156:	8f 39       	cpi	r24, 0x9F	; 159
    2158:	92 07       	cpc	r25, r18
    215a:	99 f7       	brne	.-26     	; 0x2142 <main+0xb8>
		num[i] = pgm_read_byte(gImage_DC6+i);
	EPD_Dis_Part(0,39,0,82,num,1);
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	67 e2       	ldi	r22, 0x27	; 39
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	40 e0       	ldi	r20, 0x00	; 0
    2166:	50 e0       	ldi	r21, 0x00	; 0
    2168:	72 e5       	ldi	r23, 0x52	; 82
    216a:	e7 2e       	mov	r14, r23
    216c:	f1 2c       	mov	r15, r1
    216e:	01 2d       	mov	r16, r1
    2170:	11 2d       	mov	r17, r1
    2172:	94 e9       	ldi	r25, 0x94	; 148
    2174:	c9 2e       	mov	r12, r25
    2176:	91 e0       	ldi	r25, 0x01	; 1
    2178:	d9 2e       	mov	r13, r25
    217a:	aa 24       	eor	r10, r10
    217c:	a3 94       	inc	r10
    217e:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <EPD_Dis_Part>
	
//	EPD_Dis_Part(56,79,0,23,gImage_ddd,1);		// 度

	EPD_Dis_Part(64,87,225,250,gImage_n,1);		//负号
    2182:	80 e4       	ldi	r24, 0x40	; 64
    2184:	67 e5       	ldi	r22, 0x57	; 87
    2186:	21 ee       	ldi	r18, 0xE1	; 225
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	40 e0       	ldi	r20, 0x00	; 0
    218c:	50 e0       	ldi	r21, 0x00	; 0
    218e:	ba ef       	ldi	r27, 0xFA	; 250
    2190:	eb 2e       	mov	r14, r27
    2192:	f1 2c       	mov	r15, r1
    2194:	01 2d       	mov	r16, r1
    2196:	11 2d       	mov	r17, r1
    2198:	a7 e2       	ldi	r26, 0x27	; 39
    219a:	ca 2e       	mov	r12, r26
    219c:	a1 e0       	ldi	r26, 0x01	; 1
    219e:	da 2e       	mov	r13, r26
    21a0:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <EPD_Dis_Part>
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	90 e0       	ldi	r25, 0x00	; 0
	for(i=0; i<504; i++)
		num[i] = pgm_read_byte(gImage_8+i);
    21a8:	fc 01       	movw	r30, r24
    21aa:	e5 59       	subi	r30, 0x95	; 149
    21ac:	fc 4e       	sbci	r31, 0xEC	; 236
    21ae:	e4 91       	lpm	r30, Z+
    21b0:	dc 01       	movw	r26, r24
    21b2:	ac 56       	subi	r26, 0x6C	; 108
    21b4:	be 4f       	sbci	r27, 0xFE	; 254
    21b6:	ec 93       	st	X, r30
	EPD_Dis_Part(0,39,0,82,num,1);
	
//	EPD_Dis_Part(56,79,0,23,gImage_ddd,1);		// 度

	EPD_Dis_Part(64,87,225,250,gImage_n,1);		//负号
	for(i=0; i<504; i++)
    21b8:	01 96       	adiw	r24, 0x01	; 1
    21ba:	21 e0       	ldi	r18, 0x01	; 1
    21bc:	88 3f       	cpi	r24, 0xF8	; 248
    21be:	92 07       	cpc	r25, r18
    21c0:	99 f7       	brne	.-26     	; 0x21a8 <main+0x11e>
		num[i] = pgm_read_byte(gImage_8+i);
	EPD_Dis_Part(40,111,119,174,num,1);
    21c2:	88 e2       	ldi	r24, 0x28	; 40
    21c4:	6f e6       	ldi	r22, 0x6F	; 111
    21c6:	27 e7       	ldi	r18, 0x77	; 119
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	40 e0       	ldi	r20, 0x00	; 0
    21cc:	50 e0       	ldi	r21, 0x00	; 0
    21ce:	fe ea       	ldi	r31, 0xAE	; 174
    21d0:	ef 2e       	mov	r14, r31
    21d2:	f1 2c       	mov	r15, r1
    21d4:	01 2d       	mov	r16, r1
    21d6:	11 2d       	mov	r17, r1
    21d8:	e4 e9       	ldi	r30, 0x94	; 148
    21da:	ce 2e       	mov	r12, r30
    21dc:	e1 e0       	ldi	r30, 0x01	; 1
    21de:	de 2e       	mov	r13, r30
    21e0:	aa 24       	eor	r10, r10
    21e2:	a3 94       	inc	r10
    21e4:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <EPD_Dis_Part>
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	90 e0       	ldi	r25, 0x00	; 0
	
		
	for(i=0; i<504; i++)
		num[i] = pgm_read_byte(gImage_2+i);
    21ec:	fc 01       	movw	r30, r24
    21ee:	e5 56       	subi	r30, 0x65	; 101
    21f0:	f8 4f       	sbci	r31, 0xF8	; 248
    21f2:	e4 91       	lpm	r30, Z+
    21f4:	dc 01       	movw	r26, r24
    21f6:	ac 56       	subi	r26, 0x6C	; 108
    21f8:	be 4f       	sbci	r27, 0xFE	; 254
    21fa:	ec 93       	st	X, r30
	for(i=0; i<504; i++)
		num[i] = pgm_read_byte(gImage_8+i);
	EPD_Dis_Part(40,111,119,174,num,1);
	
		
	for(i=0; i<504; i++)
    21fc:	01 96       	adiw	r24, 0x01	; 1
    21fe:	21 e0       	ldi	r18, 0x01	; 1
    2200:	88 3f       	cpi	r24, 0xF8	; 248
    2202:	92 07       	cpc	r25, r18
    2204:	99 f7       	brne	.-26     	; 0x21ec <main+0x162>
		num[i] = pgm_read_byte(gImage_2+i);
	EPD_Dis_Part(40,111,170,225,num,1);
    2206:	88 e2       	ldi	r24, 0x28	; 40
    2208:	6f e6       	ldi	r22, 0x6F	; 111
    220a:	2a ea       	ldi	r18, 0xAA	; 170
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	40 e0       	ldi	r20, 0x00	; 0
    2210:	50 e0       	ldi	r21, 0x00	; 0
    2212:	71 ee       	ldi	r23, 0xE1	; 225
    2214:	e7 2e       	mov	r14, r23
    2216:	f1 2c       	mov	r15, r1
    2218:	01 2d       	mov	r16, r1
    221a:	11 2d       	mov	r17, r1
    221c:	94 e9       	ldi	r25, 0x94	; 148
    221e:	c9 2e       	mov	r12, r25
    2220:	91 e0       	ldi	r25, 0x01	; 1
    2222:	d9 2e       	mov	r13, r25
    2224:	aa 24       	eor	r10, r10
    2226:	a3 94       	inc	r10
    2228:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <EPD_Dis_Part>
	
	EPD_Dis_Part(88,111,102,114,gImage_dot,1);
    222c:	88 e5       	ldi	r24, 0x58	; 88
    222e:	6f e6       	ldi	r22, 0x6F	; 111
    2230:	26 e6       	ldi	r18, 0x66	; 102
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	40 e0       	ldi	r20, 0x00	; 0
    2236:	50 e0       	ldi	r21, 0x00	; 0
    2238:	b2 e7       	ldi	r27, 0x72	; 114
    223a:	eb 2e       	mov	r14, r27
    223c:	f1 2c       	mov	r15, r1
    223e:	01 2d       	mov	r16, r1
    2240:	11 2d       	mov	r17, r1
    2242:	a8 eb       	ldi	r26, 0xB8	; 184
    2244:	ca 2e       	mov	r12, r26
    2246:	a0 e0       	ldi	r26, 0x00	; 0
    2248:	da 2e       	mov	r13, r26
    224a:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <EPD_Dis_Part>
    224e:	f8 ec       	ldi	r31, 0xC8	; 200
    2250:	8f 2e       	mov	r8, r31
    2252:	91 2c       	mov	r9, r1
		_delay_ms(1000);
		
		for(i=0; i<504; i++)
			num[i] = pgm_read_byte(gImage_9+i);
		EPD_Dis_Part(40,111,45,100,num,1);
		PORTA^=0x08;
    2254:	e8 e0       	ldi	r30, 0x08	; 8
    2256:	be 2e       	mov	r11, r30
	EPD_Dis_Part(88,111,102,114,gImage_dot,1);
	
	while(1)
	{
	//	EPD_Dis_Full((unsigned char *)&m,0x00);  //all white
		m++;
    2258:	89 81       	ldd	r24, Y+1	; 0x01
    225a:	9a 81       	ldd	r25, Y+2	; 0x02
    225c:	01 96       	adiw	r24, 0x01	; 1
    225e:	9a 83       	std	Y+2, r25	; 0x02
    2260:	89 83       	std	Y+1, r24	; 0x01
		EPD_init_Part();
    2262:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <EPD_init_Part>
    2266:	80 e1       	ldi	r24, 0x10	; 16
    2268:	97 e2       	ldi	r25, 0x27	; 39
    226a:	f4 01       	movw	r30, r8
    226c:	31 97       	sbiw	r30, 0x01	; 1
    226e:	f1 f7       	brne	.-4      	; 0x226c <main+0x1e2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2270:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2272:	d9 f7       	brne	.-10     	; 0x226a <main+0x1e0>
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	90 e0       	ldi	r25, 0x00	; 0
		_delay_ms(1000);

		for(i=0; i<504; i++)
			num[i] = pgm_read_byte(gImage_0+i);
    2278:	fc 01       	movw	r30, r24
    227a:	e5 55       	subi	r30, 0x55	; 85
    227c:	fc 4f       	sbci	r31, 0xFC	; 252
    227e:	e4 91       	lpm	r30, Z+
    2280:	dc 01       	movw	r26, r24
    2282:	ac 56       	subi	r26, 0x6C	; 108
    2284:	be 4f       	sbci	r27, 0xFE	; 254
    2286:	ec 93       	st	X, r30
	//	EPD_Dis_Full((unsigned char *)&m,0x00);  //all white
		m++;
		EPD_init_Part();
		_delay_ms(1000);

		for(i=0; i<504; i++)
    2288:	01 96       	adiw	r24, 0x01	; 1
    228a:	21 e0       	ldi	r18, 0x01	; 1
    228c:	88 3f       	cpi	r24, 0xF8	; 248
    228e:	92 07       	cpc	r25, r18
    2290:	99 f7       	brne	.-26     	; 0x2278 <main+0x1ee>
			num[i] = pgm_read_byte(gImage_0+i);
		EPD_Dis_Part(40,111,45,100,num,1);
    2292:	88 e2       	ldi	r24, 0x28	; 40
    2294:	6f e6       	ldi	r22, 0x6F	; 111
    2296:	2d e2       	ldi	r18, 0x2D	; 45
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	40 e0       	ldi	r20, 0x00	; 0
    229c:	50 e0       	ldi	r21, 0x00	; 0
    229e:	74 e6       	ldi	r23, 0x64	; 100
    22a0:	e7 2e       	mov	r14, r23
    22a2:	f1 2c       	mov	r15, r1
    22a4:	01 2d       	mov	r16, r1
    22a6:	11 2d       	mov	r17, r1
    22a8:	94 e9       	ldi	r25, 0x94	; 148
    22aa:	c9 2e       	mov	r12, r25
    22ac:	91 e0       	ldi	r25, 0x01	; 1
    22ae:	d9 2e       	mov	r13, r25
    22b0:	aa 24       	eor	r10, r10
    22b2:	a3 94       	inc	r10
    22b4:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <EPD_Dis_Part>
    22b8:	80 e1       	ldi	r24, 0x10	; 16
    22ba:	97 e2       	ldi	r25, 0x27	; 39
    22bc:	f4 01       	movw	r30, r8
    22be:	31 97       	sbiw	r30, 0x01	; 1
    22c0:	f1 f7       	brne	.-4      	; 0x22be <main+0x234>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c4:	d9 f7       	brne	.-10     	; 0x22bc <main+0x232>
    22c6:	80 e0       	ldi	r24, 0x00	; 0
    22c8:	90 e0       	ldi	r25, 0x00	; 0
		
		_delay_ms(1000);
		
		for(i=0; i<504; i++)
			num[i] = pgm_read_byte(gImage_1+i);
    22ca:	fc 01       	movw	r30, r24
    22cc:	ed 55       	subi	r30, 0x5D	; 93
    22ce:	fa 4f       	sbci	r31, 0xFA	; 250
    22d0:	e4 91       	lpm	r30, Z+
    22d2:	dc 01       	movw	r26, r24
    22d4:	ac 56       	subi	r26, 0x6C	; 108
    22d6:	be 4f       	sbci	r27, 0xFE	; 254
    22d8:	ec 93       	st	X, r30
			num[i] = pgm_read_byte(gImage_0+i);
		EPD_Dis_Part(40,111,45,100,num,1);
		
		_delay_ms(1000);
		
		for(i=0; i<504; i++)
    22da:	01 96       	adiw	r24, 0x01	; 1
    22dc:	21 e0       	ldi	r18, 0x01	; 1
    22de:	88 3f       	cpi	r24, 0xF8	; 248
    22e0:	92 07       	cpc	r25, r18
    22e2:	99 f7       	brne	.-26     	; 0x22ca <main+0x240>
			num[i] = pgm_read_byte(gImage_1+i);
		EPD_Dis_Part(40,111,45,100,num,1);
    22e4:	88 e2       	ldi	r24, 0x28	; 40
    22e6:	6f e6       	ldi	r22, 0x6F	; 111
    22e8:	2d e2       	ldi	r18, 0x2D	; 45
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	40 e0       	ldi	r20, 0x00	; 0
    22ee:	50 e0       	ldi	r21, 0x00	; 0
    22f0:	b4 e6       	ldi	r27, 0x64	; 100
    22f2:	eb 2e       	mov	r14, r27
    22f4:	f1 2c       	mov	r15, r1
    22f6:	01 2d       	mov	r16, r1
    22f8:	11 2d       	mov	r17, r1
    22fa:	a4 e9       	ldi	r26, 0x94	; 148
    22fc:	ca 2e       	mov	r12, r26
    22fe:	a1 e0       	ldi	r26, 0x01	; 1
    2300:	da 2e       	mov	r13, r26
    2302:	aa 24       	eor	r10, r10
    2304:	a3 94       	inc	r10
    2306:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <EPD_Dis_Part>
    230a:	80 e1       	ldi	r24, 0x10	; 16
    230c:	97 e2       	ldi	r25, 0x27	; 39
    230e:	f4 01       	movw	r30, r8
    2310:	31 97       	sbiw	r30, 0x01	; 1
    2312:	f1 f7       	brne	.-4      	; 0x2310 <main+0x286>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2314:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2316:	d9 f7       	brne	.-10     	; 0x230e <main+0x284>
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	90 e0       	ldi	r25, 0x00	; 0
		
		_delay_ms(1000);
		
		for(i=0; i<504; i++)
			num[i] = pgm_read_byte(gImage_2+i);
    231c:	fc 01       	movw	r30, r24
    231e:	e5 56       	subi	r30, 0x65	; 101
    2320:	f8 4f       	sbci	r31, 0xF8	; 248
    2322:	e4 91       	lpm	r30, Z+
    2324:	dc 01       	movw	r26, r24
    2326:	ac 56       	subi	r26, 0x6C	; 108
    2328:	be 4f       	sbci	r27, 0xFE	; 254
    232a:	ec 93       	st	X, r30
			num[i] = pgm_read_byte(gImage_1+i);
		EPD_Dis_Part(40,111,45,100,num,1);
		
		_delay_ms(1000);
		
		for(i=0; i<504; i++)
    232c:	01 96       	adiw	r24, 0x01	; 1
    232e:	21 e0       	ldi	r18, 0x01	; 1
    2330:	88 3f       	cpi	r24, 0xF8	; 248
    2332:	92 07       	cpc	r25, r18
    2334:	99 f7       	brne	.-26     	; 0x231c <main+0x292>
			num[i] = pgm_read_byte(gImage_2+i);
		EPD_Dis_Part(40,111,45,100,num,1);
    2336:	88 e2       	ldi	r24, 0x28	; 40
    2338:	6f e6       	ldi	r22, 0x6F	; 111
    233a:	2d e2       	ldi	r18, 0x2D	; 45
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	40 e0       	ldi	r20, 0x00	; 0
    2340:	50 e0       	ldi	r21, 0x00	; 0
    2342:	f4 e6       	ldi	r31, 0x64	; 100
    2344:	ef 2e       	mov	r14, r31
    2346:	f1 2c       	mov	r15, r1
    2348:	01 2d       	mov	r16, r1
    234a:	11 2d       	mov	r17, r1
    234c:	e4 e9       	ldi	r30, 0x94	; 148
    234e:	ce 2e       	mov	r12, r30
    2350:	e1 e0       	ldi	r30, 0x01	; 1
    2352:	de 2e       	mov	r13, r30
    2354:	aa 24       	eor	r10, r10
    2356:	a3 94       	inc	r10
    2358:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <EPD_Dis_Part>
    235c:	80 e1       	ldi	r24, 0x10	; 16
    235e:	97 e2       	ldi	r25, 0x27	; 39
    2360:	f4 01       	movw	r30, r8
    2362:	31 97       	sbiw	r30, 0x01	; 1
    2364:	f1 f7       	brne	.-4      	; 0x2362 <main+0x2d8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2366:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2368:	d9 f7       	brne	.-10     	; 0x2360 <main+0x2d6>
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	90 e0       	ldi	r25, 0x00	; 0

		_delay_ms(1000);
		
		for(i=0; i<504; i++)
			num[i] = pgm_read_byte(gImage_3+i);
    236e:	fc 01       	movw	r30, r24
    2370:	ed 56       	subi	r30, 0x6D	; 109
    2372:	f6 4f       	sbci	r31, 0xF6	; 246
    2374:	e4 91       	lpm	r30, Z+
    2376:	dc 01       	movw	r26, r24
    2378:	ac 56       	subi	r26, 0x6C	; 108
    237a:	be 4f       	sbci	r27, 0xFE	; 254
    237c:	ec 93       	st	X, r30
			num[i] = pgm_read_byte(gImage_2+i);
		EPD_Dis_Part(40,111,45,100,num,1);

		_delay_ms(1000);
		
		for(i=0; i<504; i++)
    237e:	01 96       	adiw	r24, 0x01	; 1
    2380:	21 e0       	ldi	r18, 0x01	; 1
    2382:	88 3f       	cpi	r24, 0xF8	; 248
    2384:	92 07       	cpc	r25, r18
    2386:	99 f7       	brne	.-26     	; 0x236e <main+0x2e4>
			num[i] = pgm_read_byte(gImage_3+i);
		EPD_Dis_Part(40,111,45,100,num,1);
    2388:	88 e2       	ldi	r24, 0x28	; 40
    238a:	6f e6       	ldi	r22, 0x6F	; 111
    238c:	2d e2       	ldi	r18, 0x2D	; 45
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	40 e0       	ldi	r20, 0x00	; 0
    2392:	50 e0       	ldi	r21, 0x00	; 0
    2394:	74 e6       	ldi	r23, 0x64	; 100
    2396:	e7 2e       	mov	r14, r23
    2398:	f1 2c       	mov	r15, r1
    239a:	01 2d       	mov	r16, r1
    239c:	11 2d       	mov	r17, r1
    239e:	94 e9       	ldi	r25, 0x94	; 148
    23a0:	c9 2e       	mov	r12, r25
    23a2:	91 e0       	ldi	r25, 0x01	; 1
    23a4:	d9 2e       	mov	r13, r25
    23a6:	aa 24       	eor	r10, r10
    23a8:	a3 94       	inc	r10
    23aa:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <EPD_Dis_Part>
    23ae:	80 e1       	ldi	r24, 0x10	; 16
    23b0:	97 e2       	ldi	r25, 0x27	; 39
    23b2:	f4 01       	movw	r30, r8
    23b4:	31 97       	sbiw	r30, 0x01	; 1
    23b6:	f1 f7       	brne	.-4      	; 0x23b4 <main+0x32a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23b8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ba:	d9 f7       	brne	.-10     	; 0x23b2 <main+0x328>
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	90 e0       	ldi	r25, 0x00	; 0
		_delay_ms(1000);
		
		for(i=0; i<504; i++)
			num[i] = pgm_read_byte(gImage_4+i);
    23c0:	fc 01       	movw	r30, r24
    23c2:	e5 57       	subi	r30, 0x75	; 117
    23c4:	f4 4f       	sbci	r31, 0xF4	; 244
    23c6:	e4 91       	lpm	r30, Z+
    23c8:	dc 01       	movw	r26, r24
    23ca:	ac 56       	subi	r26, 0x6C	; 108
    23cc:	be 4f       	sbci	r27, 0xFE	; 254
    23ce:	ec 93       	st	X, r30
		for(i=0; i<504; i++)
			num[i] = pgm_read_byte(gImage_3+i);
		EPD_Dis_Part(40,111,45,100,num,1);
		_delay_ms(1000);
		
		for(i=0; i<504; i++)
    23d0:	01 96       	adiw	r24, 0x01	; 1
    23d2:	21 e0       	ldi	r18, 0x01	; 1
    23d4:	88 3f       	cpi	r24, 0xF8	; 248
    23d6:	92 07       	cpc	r25, r18
    23d8:	99 f7       	brne	.-26     	; 0x23c0 <main+0x336>
			num[i] = pgm_read_byte(gImage_4+i);
		EPD_Dis_Part(40,111,45,100,num,1);
    23da:	88 e2       	ldi	r24, 0x28	; 40
    23dc:	6f e6       	ldi	r22, 0x6F	; 111
    23de:	2d e2       	ldi	r18, 0x2D	; 45
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	40 e0       	ldi	r20, 0x00	; 0
    23e4:	50 e0       	ldi	r21, 0x00	; 0
    23e6:	b4 e6       	ldi	r27, 0x64	; 100
    23e8:	eb 2e       	mov	r14, r27
    23ea:	f1 2c       	mov	r15, r1
    23ec:	01 2d       	mov	r16, r1
    23ee:	11 2d       	mov	r17, r1
    23f0:	a4 e9       	ldi	r26, 0x94	; 148
    23f2:	ca 2e       	mov	r12, r26
    23f4:	a1 e0       	ldi	r26, 0x01	; 1
    23f6:	da 2e       	mov	r13, r26
    23f8:	aa 24       	eor	r10, r10
    23fa:	a3 94       	inc	r10
    23fc:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <EPD_Dis_Part>
    2400:	80 e1       	ldi	r24, 0x10	; 16
    2402:	97 e2       	ldi	r25, 0x27	; 39
    2404:	f4 01       	movw	r30, r8
    2406:	31 97       	sbiw	r30, 0x01	; 1
    2408:	f1 f7       	brne	.-4      	; 0x2406 <main+0x37c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    240a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    240c:	d9 f7       	brne	.-10     	; 0x2404 <main+0x37a>
    240e:	80 e0       	ldi	r24, 0x00	; 0
    2410:	90 e0       	ldi	r25, 0x00	; 0
		_delay_ms(1000);
		
		for(i=0; i<504; i++)
			num[i] = pgm_read_byte(gImage_5+i);
    2412:	fc 01       	movw	r30, r24
    2414:	ed 57       	subi	r30, 0x7D	; 125
    2416:	f2 4f       	sbci	r31, 0xF2	; 242
    2418:	e4 91       	lpm	r30, Z+
    241a:	dc 01       	movw	r26, r24
    241c:	ac 56       	subi	r26, 0x6C	; 108
    241e:	be 4f       	sbci	r27, 0xFE	; 254
    2420:	ec 93       	st	X, r30
		for(i=0; i<504; i++)
			num[i] = pgm_read_byte(gImage_4+i);
		EPD_Dis_Part(40,111,45,100,num,1);
		_delay_ms(1000);
		
		for(i=0; i<504; i++)
    2422:	01 96       	adiw	r24, 0x01	; 1
    2424:	21 e0       	ldi	r18, 0x01	; 1
    2426:	88 3f       	cpi	r24, 0xF8	; 248
    2428:	92 07       	cpc	r25, r18
    242a:	99 f7       	brne	.-26     	; 0x2412 <main+0x388>
			num[i] = pgm_read_byte(gImage_5+i);
		EPD_Dis_Part(40,111,45,100,num,1);
    242c:	88 e2       	ldi	r24, 0x28	; 40
    242e:	6f e6       	ldi	r22, 0x6F	; 111
    2430:	2d e2       	ldi	r18, 0x2D	; 45
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	40 e0       	ldi	r20, 0x00	; 0
    2436:	50 e0       	ldi	r21, 0x00	; 0
    2438:	f4 e6       	ldi	r31, 0x64	; 100
    243a:	ef 2e       	mov	r14, r31
    243c:	f1 2c       	mov	r15, r1
    243e:	01 2d       	mov	r16, r1
    2440:	11 2d       	mov	r17, r1
    2442:	e4 e9       	ldi	r30, 0x94	; 148
    2444:	ce 2e       	mov	r12, r30
    2446:	e1 e0       	ldi	r30, 0x01	; 1
    2448:	de 2e       	mov	r13, r30
    244a:	aa 24       	eor	r10, r10
    244c:	a3 94       	inc	r10
    244e:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <EPD_Dis_Part>
    2452:	80 e1       	ldi	r24, 0x10	; 16
    2454:	97 e2       	ldi	r25, 0x27	; 39
    2456:	f4 01       	movw	r30, r8
    2458:	31 97       	sbiw	r30, 0x01	; 1
    245a:	f1 f7       	brne	.-4      	; 0x2458 <main+0x3ce>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    245c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    245e:	d9 f7       	brne	.-10     	; 0x2456 <main+0x3cc>
    2460:	80 e0       	ldi	r24, 0x00	; 0
    2462:	90 e0       	ldi	r25, 0x00	; 0
		_delay_ms(1000);
		
		for(i=0; i<504; i++)
			num[i] = pgm_read_byte(gImage_6+i);
    2464:	fc 01       	movw	r30, r24
    2466:	e5 58       	subi	r30, 0x85	; 133
    2468:	f0 4f       	sbci	r31, 0xF0	; 240
    246a:	e4 91       	lpm	r30, Z+
    246c:	dc 01       	movw	r26, r24
    246e:	ac 56       	subi	r26, 0x6C	; 108
    2470:	be 4f       	sbci	r27, 0xFE	; 254
    2472:	ec 93       	st	X, r30
		for(i=0; i<504; i++)
			num[i] = pgm_read_byte(gImage_5+i);
		EPD_Dis_Part(40,111,45,100,num,1);
		_delay_ms(1000);
		
		for(i=0; i<504; i++)
    2474:	01 96       	adiw	r24, 0x01	; 1
    2476:	21 e0       	ldi	r18, 0x01	; 1
    2478:	88 3f       	cpi	r24, 0xF8	; 248
    247a:	92 07       	cpc	r25, r18
    247c:	99 f7       	brne	.-26     	; 0x2464 <main+0x3da>
			num[i] = pgm_read_byte(gImage_6+i);
		EPD_Dis_Part(40,111,45,100,num,1);
    247e:	88 e2       	ldi	r24, 0x28	; 40
    2480:	6f e6       	ldi	r22, 0x6F	; 111
    2482:	2d e2       	ldi	r18, 0x2D	; 45
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	40 e0       	ldi	r20, 0x00	; 0
    2488:	50 e0       	ldi	r21, 0x00	; 0
    248a:	74 e6       	ldi	r23, 0x64	; 100
    248c:	e7 2e       	mov	r14, r23
    248e:	f1 2c       	mov	r15, r1
    2490:	01 2d       	mov	r16, r1
    2492:	11 2d       	mov	r17, r1
    2494:	94 e9       	ldi	r25, 0x94	; 148
    2496:	c9 2e       	mov	r12, r25
    2498:	91 e0       	ldi	r25, 0x01	; 1
    249a:	d9 2e       	mov	r13, r25
    249c:	aa 24       	eor	r10, r10
    249e:	a3 94       	inc	r10
    24a0:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <EPD_Dis_Part>
    24a4:	80 e1       	ldi	r24, 0x10	; 16
    24a6:	97 e2       	ldi	r25, 0x27	; 39
    24a8:	f4 01       	movw	r30, r8
    24aa:	31 97       	sbiw	r30, 0x01	; 1
    24ac:	f1 f7       	brne	.-4      	; 0x24aa <main+0x420>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b0:	d9 f7       	brne	.-10     	; 0x24a8 <main+0x41e>
    24b2:	80 e0       	ldi	r24, 0x00	; 0
    24b4:	90 e0       	ldi	r25, 0x00	; 0
		_delay_ms(1000);
		
		for(i=0; i<504; i++)
			num[i] = pgm_read_byte(gImage_7+i);
    24b6:	fc 01       	movw	r30, r24
    24b8:	ed 58       	subi	r30, 0x8D	; 141
    24ba:	fe 4e       	sbci	r31, 0xEE	; 238
    24bc:	e4 91       	lpm	r30, Z+
    24be:	dc 01       	movw	r26, r24
    24c0:	ac 56       	subi	r26, 0x6C	; 108
    24c2:	be 4f       	sbci	r27, 0xFE	; 254
    24c4:	ec 93       	st	X, r30
		for(i=0; i<504; i++)
			num[i] = pgm_read_byte(gImage_6+i);
		EPD_Dis_Part(40,111,45,100,num,1);
		_delay_ms(1000);
		
		for(i=0; i<504; i++)
    24c6:	01 96       	adiw	r24, 0x01	; 1
    24c8:	21 e0       	ldi	r18, 0x01	; 1
    24ca:	88 3f       	cpi	r24, 0xF8	; 248
    24cc:	92 07       	cpc	r25, r18
    24ce:	99 f7       	brne	.-26     	; 0x24b6 <main+0x42c>
			num[i] = pgm_read_byte(gImage_7+i);
		EPD_Dis_Part(40,111,45,100,num,1);
    24d0:	88 e2       	ldi	r24, 0x28	; 40
    24d2:	6f e6       	ldi	r22, 0x6F	; 111
    24d4:	2d e2       	ldi	r18, 0x2D	; 45
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	40 e0       	ldi	r20, 0x00	; 0
    24da:	50 e0       	ldi	r21, 0x00	; 0
    24dc:	b4 e6       	ldi	r27, 0x64	; 100
    24de:	eb 2e       	mov	r14, r27
    24e0:	f1 2c       	mov	r15, r1
    24e2:	01 2d       	mov	r16, r1
    24e4:	11 2d       	mov	r17, r1
    24e6:	a4 e9       	ldi	r26, 0x94	; 148
    24e8:	ca 2e       	mov	r12, r26
    24ea:	a1 e0       	ldi	r26, 0x01	; 1
    24ec:	da 2e       	mov	r13, r26
    24ee:	aa 24       	eor	r10, r10
    24f0:	a3 94       	inc	r10
    24f2:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <EPD_Dis_Part>
    24f6:	80 e1       	ldi	r24, 0x10	; 16
    24f8:	97 e2       	ldi	r25, 0x27	; 39
    24fa:	f4 01       	movw	r30, r8
    24fc:	31 97       	sbiw	r30, 0x01	; 1
    24fe:	f1 f7       	brne	.-4      	; 0x24fc <main+0x472>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2500:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2502:	d9 f7       	brne	.-10     	; 0x24fa <main+0x470>
    2504:	80 e0       	ldi	r24, 0x00	; 0
    2506:	90 e0       	ldi	r25, 0x00	; 0
		_delay_ms(1000);
		
		for(i=0; i<504; i++)
			num[i] = pgm_read_byte(gImage_8+i);
    2508:	fc 01       	movw	r30, r24
    250a:	e5 59       	subi	r30, 0x95	; 149
    250c:	fc 4e       	sbci	r31, 0xEC	; 236
    250e:	e4 91       	lpm	r30, Z+
    2510:	dc 01       	movw	r26, r24
    2512:	ac 56       	subi	r26, 0x6C	; 108
    2514:	be 4f       	sbci	r27, 0xFE	; 254
    2516:	ec 93       	st	X, r30
		for(i=0; i<504; i++)
			num[i] = pgm_read_byte(gImage_7+i);
		EPD_Dis_Part(40,111,45,100,num,1);
		_delay_ms(1000);
		
		for(i=0; i<504; i++)
    2518:	01 96       	adiw	r24, 0x01	; 1
    251a:	21 e0       	ldi	r18, 0x01	; 1
    251c:	88 3f       	cpi	r24, 0xF8	; 248
    251e:	92 07       	cpc	r25, r18
    2520:	99 f7       	brne	.-26     	; 0x2508 <main+0x47e>
			num[i] = pgm_read_byte(gImage_8+i);
		EPD_Dis_Part(40,111,45,100,num,1);
    2522:	88 e2       	ldi	r24, 0x28	; 40
    2524:	6f e6       	ldi	r22, 0x6F	; 111
    2526:	2d e2       	ldi	r18, 0x2D	; 45
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	40 e0       	ldi	r20, 0x00	; 0
    252c:	50 e0       	ldi	r21, 0x00	; 0
    252e:	f4 e6       	ldi	r31, 0x64	; 100
    2530:	ef 2e       	mov	r14, r31
    2532:	f1 2c       	mov	r15, r1
    2534:	01 2d       	mov	r16, r1
    2536:	11 2d       	mov	r17, r1
    2538:	e4 e9       	ldi	r30, 0x94	; 148
    253a:	ce 2e       	mov	r12, r30
    253c:	e1 e0       	ldi	r30, 0x01	; 1
    253e:	de 2e       	mov	r13, r30
    2540:	aa 24       	eor	r10, r10
    2542:	a3 94       	inc	r10
    2544:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <EPD_Dis_Part>
    2548:	80 e1       	ldi	r24, 0x10	; 16
    254a:	97 e2       	ldi	r25, 0x27	; 39
    254c:	f4 01       	movw	r30, r8
    254e:	31 97       	sbiw	r30, 0x01	; 1
    2550:	f1 f7       	brne	.-4      	; 0x254e <main+0x4c4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2552:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2554:	d9 f7       	brne	.-10     	; 0x254c <main+0x4c2>
    2556:	80 e0       	ldi	r24, 0x00	; 0
    2558:	90 e0       	ldi	r25, 0x00	; 0
		_delay_ms(1000);
		
		for(i=0; i<504; i++)
			num[i] = pgm_read_byte(gImage_9+i);
    255a:	fc 01       	movw	r30, r24
    255c:	ed 59       	subi	r30, 0x9D	; 157
    255e:	fa 4e       	sbci	r31, 0xEA	; 234
    2560:	e4 91       	lpm	r30, Z+
    2562:	dc 01       	movw	r26, r24
    2564:	ac 56       	subi	r26, 0x6C	; 108
    2566:	be 4f       	sbci	r27, 0xFE	; 254
    2568:	ec 93       	st	X, r30
		for(i=0; i<504; i++)
			num[i] = pgm_read_byte(gImage_8+i);
		EPD_Dis_Part(40,111,45,100,num,1);
		_delay_ms(1000);
		
		for(i=0; i<504; i++)
    256a:	01 96       	adiw	r24, 0x01	; 1
    256c:	21 e0       	ldi	r18, 0x01	; 1
    256e:	88 3f       	cpi	r24, 0xF8	; 248
    2570:	92 07       	cpc	r25, r18
    2572:	99 f7       	brne	.-26     	; 0x255a <main+0x4d0>
			num[i] = pgm_read_byte(gImage_9+i);
		EPD_Dis_Part(40,111,45,100,num,1);
    2574:	88 e2       	ldi	r24, 0x28	; 40
    2576:	6f e6       	ldi	r22, 0x6F	; 111
    2578:	2d e2       	ldi	r18, 0x2D	; 45
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	40 e0       	ldi	r20, 0x00	; 0
    257e:	50 e0       	ldi	r21, 0x00	; 0
    2580:	74 e6       	ldi	r23, 0x64	; 100
    2582:	e7 2e       	mov	r14, r23
    2584:	f1 2c       	mov	r15, r1
    2586:	01 2d       	mov	r16, r1
    2588:	11 2d       	mov	r17, r1
    258a:	94 e9       	ldi	r25, 0x94	; 148
    258c:	c9 2e       	mov	r12, r25
    258e:	91 e0       	ldi	r25, 0x01	; 1
    2590:	d9 2e       	mov	r13, r25
    2592:	aa 24       	eor	r10, r10
    2594:	a3 94       	inc	r10
    2596:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <EPD_Dis_Part>
		PORTA^=0x08;
    259a:	8b b3       	in	r24, 0x1b	; 27
    259c:	8b 25       	eor	r24, r11
    259e:	8b bb       	out	0x1b, r24	; 27
    25a0:	5b ce       	rjmp	.-842    	; 0x2258 <main+0x1ce>

000025a2 <_exit>:
    25a2:	f8 94       	cli

000025a4 <__stop_program>:
    25a4:	ff cf       	rjmp	.-2      	; 0x25a4 <__stop_program>
