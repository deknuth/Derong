
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000524  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000074  00800060  00000524  000005b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003b  008000d4  008000d4  0000062c  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000f3  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000857  00000000  00000000  0000073f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000023c  00000000  00000000  00000f96  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000691  00000000  00000000  000011d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001864  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000165  00000000  00000000  000018f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000038d  00000000  00000000  00001a59  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00001de6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 76 00 	jmp	0xec	; 0xec <__vector_4>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 89 00 	jmp	0x112	; 0x112 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e2       	ldi	r30, 0x24	; 36
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 3d       	cpi	r26, 0xD4	; 212
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a4 ed       	ldi	r26, 0xD4	; 212
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 30       	cpi	r26, 0x0F	; 15
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 18 01 	call	0x230	; 0x230 <main>
  8a:	0c 94 90 02 	jmp	0x520	; 0x520 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <PortInit>:
unsigned char sBuf[6] = {0xFB,0x00,0x00,0x00,0x00,0xFF};
unsigned char cBuf[6] = {0xFC,0x00,0x00,0x00,0x00,0xFF};

void PortInit(void)
{
    DDRA = 0B00001111;		// PA4-PA7 (key encode)
  92:	8f e0       	ldi	r24, 0x0F	; 15
  94:	8a bb       	out	0x1a, r24	; 26
    PORTA= 0B00000000;
  96:	1b ba       	out	0x1b, r1	; 27
    PINA = 0x00;
  98:	19 ba       	out	0x19, r1	; 25

    DDRB = 0B00010100;		// PB4->dog
  9a:	84 e1       	ldi	r24, 0x14	; 20
  9c:	87 bb       	out	0x17, r24	; 23
    PORTB= 0B00000000;		// PB2->595 en
  9e:	18 ba       	out	0x18, r1	; 24
    PINB = 0x00;
  a0:	16 ba       	out	0x16, r1	; 22

    DDRC = 0B00111111;		// PC5->beep  (COL1->COL5 <=> PC0>PC4)
  a2:	8f e3       	ldi	r24, 0x3F	; 63
  a4:	84 bb       	out	0x14, r24	; 20
    PORTC= 0B00011111;
  a6:	8f e1       	ldi	r24, 0x1F	; 31
  a8:	85 bb       	out	0x15, r24	; 21
    PINC = 0x00;
  aa:	13 ba       	out	0x13, r1	; 19

    DDRD = 0B00000100;		// (ROW1->ROW5 <=> PD3->PD7)	// PD2->485-DR
  ac:	84 e0       	ldi	r24, 0x04	; 4
  ae:	81 bb       	out	0x11, r24	; 17
    PORTD= 0B11111000;
  b0:	88 ef       	ldi	r24, 0xF8	; 248
  b2:	82 bb       	out	0x12, r24	; 18
    PIND = 0x00;
  b4:	10 ba       	out	0x10, r1	; 16

}
  b6:	08 95       	ret

000000b8 <UartInit>:

void UartInit(void)
{
    UBRRH = (F_CPU / BAUD / 16 - 1) / 256;
  b8:	10 bc       	out	0x20, r1	; 32
    UBRRL = (F_CPU / BAUD / 16 - 1) % 256;
  ba:	8b e0       	ldi	r24, 0x0B	; 11
  bc:	89 b9       	out	0x09, r24	; 9
    UCSRB = 1<<RXEN | 1<<TXEN | 1<<RXCIE;
  be:	88 e9       	ldi	r24, 0x98	; 152
  c0:	8a b9       	out	0x0a, r24	; 10
    UCSRC = 1<<UCSZ0 | 1<<UCSZ1 | 1<<URSEL;
  c2:	86 e8       	ldi	r24, 0x86	; 134
  c4:	80 bd       	out	0x20, r24	; 32
}
  c6:	08 95       	ret

000000c8 <R485Send>:


void R485Send(unsigned char* data,unsigned char len)
{
  c8:	48 2f       	mov	r20, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  ca:	81 e3       	ldi	r24, 0x31	; 49
  cc:	8a 95       	dec	r24
  ce:	f1 f7       	brne	.-4      	; 0xcc <R485Send+0x4>
  d0:	24 2f       	mov	r18, r20
  d2:	39 2f       	mov	r19, r25
  d4:	c9 01       	movw	r24, r18
  d6:	fc 01       	movw	r30, r24
  d8:	04 c0       	rjmp	.+8      	; 0xe2 <R485Send+0x1a>
    unsigned char i;
  //  TX_ENA;
    _delay_us(20);
    for(i=0; i<len; i++)
    {
        while(!(UCSRA & (1 << UDRE)));
  da:	5d 9b       	sbis	0x0b, 5	; 11
  dc:	fe cf       	rjmp	.-4      	; 0xda <R485Send+0x12>
        UDR = *(data++);
  de:	81 91       	ld	r24, Z+
  e0:	8c b9       	out	0x0c, r24	; 12
void R485Send(unsigned char* data,unsigned char len)
{
    unsigned char i;
  //  TX_ENA;
    _delay_us(20);
    for(i=0; i<len; i++)
  e2:	8e 2f       	mov	r24, r30
  e4:	84 1b       	sub	r24, r20
  e6:	86 17       	cp	r24, r22
  e8:	c0 f3       	brcs	.-16     	; 0xda <R485Send+0x12>
    {
        while(!(UCSRA & (1 << UDRE)));
        UDR = *(data++);
    }
 //   RX_ENA;
}
  ea:	08 95       	ret

000000ec <__vector_4>:
unsigned char dis[4] = {0};
volatile unsigned char count = 0;
unsigned char tmp;

ISR(SIG_OVERFLOW2)			// UART0 timeout
{
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	8f 93       	push	r24
    U0Ready = 1;
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	80 93 d4 00 	sts	0x00D4, r24
    T2_OFF;
  fe:	15 bc       	out	0x25, r1	; 37
 100:	89 b7       	in	r24, 0x39	; 57
 102:	80 78       	andi	r24, 0x80	; 128
 104:	89 bf       	out	0x39, r24	; 57
}
 106:	8f 91       	pop	r24
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <__vector_11>:

ISR(USART_RXC_vect)
{
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	8f 93       	push	r24
 11e:	9f 93       	push	r25
 120:	ef 93       	push	r30
 122:	ff 93       	push	r31
    unsigned char tmp;
    T2_ON;
 124:	85 e0       	ldi	r24, 0x05	; 5
 126:	85 bd       	out	0x25, r24	; 37
 128:	89 b7       	in	r24, 0x39	; 57
 12a:	80 64       	ori	r24, 0x40	; 64
 12c:	89 bf       	out	0x39, r24	; 57
 12e:	14 bc       	out	0x24, r1	; 36
    tmp = UDR;
 130:	9c b1       	in	r25, 0x0c	; 12
    rBuf[U0Count++] = tmp;
 132:	80 91 d5 00 	lds	r24, 0x00D5
 136:	e8 2f       	mov	r30, r24
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	ea 52       	subi	r30, 0x2A	; 42
 13c:	ff 4f       	sbci	r31, 0xFF	; 255
 13e:	90 83       	st	Z, r25
 140:	8f 5f       	subi	r24, 0xFF	; 255
 142:	80 93 d5 00 	sts	0x00D5, r24
    if(U0Count >= MAX_R_LEN)
 146:	80 91 d5 00 	lds	r24, 0x00D5
 14a:	80 31       	cpi	r24, 0x10	; 16
 14c:	10 f0       	brcs	.+4      	; 0x152 <__vector_11+0x40>
        U0Count = 0;
 14e:	10 92 d5 00 	sts	0x00D5, r1
}
 152:	ff 91       	pop	r31
 154:	ef 91       	pop	r30
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <Send595>:


void Send595(unsigned long data)
{
 164:	20 e0       	ldi	r18, 0x00	; 0
 166:	30 e0       	ldi	r19, 0x00	; 0
    int i;
    for(i=0; i<25; i++)
    {
        SCK_595_H;
 168:	d9 9a       	sbi	0x1b, 1	; 27
        if(data&0x800000)
 16a:	87 ff       	sbrs	r24, 7
 16c:	02 c0       	rjmp	.+4      	; 0x172 <Send595+0xe>
            DATA_595_H;
 16e:	db 9a       	sbi	0x1b, 3	; 27
 170:	01 c0       	rjmp	.+2      	; 0x174 <Send595+0x10>
        else
            DATA_595_L;
 172:	db 98       	cbi	0x1b, 3	; 27
        data <<= 1;
        SCK_595_L;
 174:	d9 98       	cbi	0x1b, 1	; 27


void Send595(unsigned long data)
{
    int i;
    for(i=0; i<25; i++)
 176:	2f 5f       	subi	r18, 0xFF	; 255
 178:	3f 4f       	sbci	r19, 0xFF	; 255
 17a:	29 31       	cpi	r18, 0x19	; 25
 17c:	31 05       	cpc	r19, r1
 17e:	29 f0       	breq	.+10     	; 0x18a <Send595+0x26>
        SCK_595_H;
        if(data&0x800000)
            DATA_595_H;
        else
            DATA_595_L;
        data <<= 1;
 180:	66 0f       	add	r22, r22
 182:	77 1f       	adc	r23, r23
 184:	88 1f       	adc	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	ef cf       	rjmp	.-34     	; 0x168 <Send595+0x4>
        SCK_595_L;
    }
    RCK_595_H;
 18a:	da 9a       	sbi	0x1b, 2	; 27
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	8a 95       	dec	r24
 190:	f1 f7       	brne	.-4      	; 0x18e <Send595+0x2a>
    _delay_us(1);
    RCK_595_L;
 192:	da 98       	cbi	0x1b, 2	; 27
    DATA_595_L;
 194:	db 98       	cbi	0x1b, 3	; 27
}
 196:	08 95       	ret

00000198 <KeyScan>:
};
unsigned char key_stat[26] = {0};
unsigned char scan[5] = {0};
unsigned long key_stat_l = 0;
void KeyScan(void)
{
 198:	40 e0       	ldi	r20, 0x00	; 0
 19a:	50 e0       	ldi	r21, 0x00	; 0
    unsigned char i,j;
    unsigned char temp;
    for(i=0; i<5; i++) //(ROW1->ROW5 <=> PD3->PD7)  (COL1->COL5 <=> PC0>PC4)
    {
        PORTC &= ~(1<<i);
 19c:	a1 e0       	ldi	r26, 0x01	; 1
 19e:	b0 e0       	ldi	r27, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1a0:	60 e0       	ldi	r22, 0x00	; 0
 1a2:	74 e2       	ldi	r23, 0x24	; 36
 1a4:	95 b3       	in	r25, 0x15	; 21
 1a6:	9d 01       	movw	r18, r26
 1a8:	04 2e       	mov	r0, r20
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <KeyScan+0x18>
 1ac:	22 0f       	add	r18, r18
 1ae:	33 1f       	adc	r19, r19
 1b0:	0a 94       	dec	r0
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <KeyScan+0x14>
 1b4:	82 2f       	mov	r24, r18
 1b6:	80 95       	com	r24
 1b8:	89 23       	and	r24, r25
 1ba:	85 bb       	out	0x15, r24	; 21
 1bc:	cb 01       	movw	r24, r22
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <KeyScan+0x26>
        _delay_ms(5);
        temp = ((PIND&0xF8)>>3);
 1c2:	80 b3       	in	r24, 0x10	; 16
 1c4:	fb 01       	movw	r30, r22
 1c6:	31 97       	sbiw	r30, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <KeyScan+0x2e>
        _delay_ms(5);
        scan[i] = temp;
 1ca:	fa 01       	movw	r30, r20
 1cc:	eb 5f       	subi	r30, 0xFB	; 251
 1ce:	fe 4f       	sbci	r31, 0xFE	; 254
 1d0:	86 95       	lsr	r24
 1d2:	86 95       	lsr	r24
 1d4:	86 95       	lsr	r24
 1d6:	80 83       	st	Z, r24
        PORTC |= (1<<i);
 1d8:	85 b3       	in	r24, 0x15	; 21
 1da:	28 2b       	or	r18, r24
 1dc:	25 bb       	out	0x15, r18	; 21
 1de:	4f 5f       	subi	r20, 0xFF	; 255
 1e0:	5f 4f       	sbci	r21, 0xFF	; 255
unsigned long key_stat_l = 0;
void KeyScan(void)
{
    unsigned char i,j;
    unsigned char temp;
    for(i=0; i<5; i++) //(ROW1->ROW5 <=> PD3->PD7)  (COL1->COL5 <=> PC0>PC4)
 1e2:	45 30       	cpi	r20, 0x05	; 5
 1e4:	51 05       	cpc	r21, r1
 1e6:	f1 f6       	brne	.-68     	; 0x1a4 <KeyScan+0xc>
 1e8:	e5 e0       	ldi	r30, 0x05	; 5
 1ea:	f1 e0       	ldi	r31, 0x01	; 1
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	50 e0       	ldi	r21, 0x00	; 0
 1f0:	15 c0       	rjmp	.+42     	; 0x21c <KeyScan+0x84>
    }

	for(i=0; i<5; i++)	// scan over
    {
        for(j=0; j<5; j++)
            key_stat[i*5+j] = ((scan[i]>>j)&0x01);
 1f2:	cb 01       	movw	r24, r22
 1f4:	02 2e       	mov	r0, r18
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <KeyScan+0x64>
 1f8:	95 95       	asr	r25
 1fa:	87 95       	ror	r24
 1fc:	0a 94       	dec	r0
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <KeyScan+0x60>
 200:	81 70       	andi	r24, 0x01	; 1
 202:	8d 93       	st	X+, r24
 204:	2f 5f       	subi	r18, 0xFF	; 255
 206:	3f 4f       	sbci	r19, 0xFF	; 255
        PORTC |= (1<<i);
    }

	for(i=0; i<5; i++)	// scan over
    {
        for(j=0; j<5; j++)
 208:	25 30       	cpi	r18, 0x05	; 5
 20a:	31 05       	cpc	r19, r1
 20c:	91 f7       	brne	.-28     	; 0x1f2 <KeyScan+0x5a>
 20e:	31 96       	adiw	r30, 0x01	; 1
 210:	4b 5f       	subi	r20, 0xFB	; 251
 212:	5f 4f       	sbci	r21, 0xFF	; 255
        _delay_ms(5);
        scan[i] = temp;
        PORTC |= (1<<i);
    }

	for(i=0; i<5; i++)	// scan over
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	ea 30       	cpi	r30, 0x0A	; 10
 218:	f8 07       	cpc	r31, r24
 21a:	49 f0       	breq	.+18     	; 0x22e <KeyScan+0x96>
    {
        for(j=0; j<5; j++)
            key_stat[i*5+j] = ((scan[i]>>j)&0x01);
 21c:	80 81       	ld	r24, Z
 21e:	68 2f       	mov	r22, r24
 220:	70 e0       	ldi	r23, 0x00	; 0
 222:	da 01       	movw	r26, r20
 224:	a5 51       	subi	r26, 0x15	; 21
 226:	bf 4f       	sbci	r27, 0xFF	; 255
 228:	20 e0       	ldi	r18, 0x00	; 0
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	e2 cf       	rjmp	.-60     	; 0x1f2 <KeyScan+0x5a>
 22e:	08 95       	ret

00000230 <main>:
    }
}

int main(void)
{
 230:	9f 92       	push	r9
 232:	af 92       	push	r10
 234:	bf 92       	push	r11
 236:	cf 92       	push	r12
 238:	df 92       	push	r13
 23a:	ef 92       	push	r14
 23c:	ff 92       	push	r15
 23e:	0f 93       	push	r16
 240:	1f 93       	push	r17
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
    unsigned int keyBit;
	unsigned char encode = 0;
	unsigned char i = 0;
    cli();
 246:	f8 94       	cli
    PortInit();
 248:	0e 94 49 00 	call	0x92	; 0x92 <PortInit>
	RS_595;
 24c:	d8 98       	cbi	0x1b, 0	; 27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 24e:	8c e0       	ldi	r24, 0x0C	; 12
 250:	8a 95       	dec	r24
 252:	f1 f7       	brne	.-4      	; 0x250 <main+0x20>
 254:	d8 9a       	sbi	0x1b, 0	; 27
    Send595(0);
 256:	60 e0       	ldi	r22, 0x00	; 0
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0e 94 b2 00 	call	0x164	; 0x164 <Send595>

}

void UartInit(void)
{
    UBRRH = (F_CPU / BAUD / 16 - 1) / 256;
 262:	10 bc       	out	0x20, r1	; 32
    UBRRL = (F_CPU / BAUD / 16 - 1) % 256;
 264:	8b e0       	ldi	r24, 0x0B	; 11
 266:	89 b9       	out	0x09, r24	; 9
    UCSRB = 1<<RXEN | 1<<TXEN | 1<<RXCIE;
 268:	88 e9       	ldi	r24, 0x98	; 152
 26a:	8a b9       	out	0x0a, r24	; 10
    UCSRC = 1<<UCSZ0 | 1<<UCSZ1 | 1<<URSEL;
 26c:	86 e8       	ldi	r24, 0x86	; 134
 26e:	80 bd       	out	0x20, r24	; 32
    PortInit();
	RS_595;
    Send595(0);
    UartInit();
    //    T0Init();
    sei();
 270:	78 94       	sei
	
	PORTC |= 1<<5;
 272:	ad 9a       	sbi	0x15, 5	; 21
 274:	8c ed       	ldi	r24, 0xDC	; 220
 276:	95 e0       	ldi	r25, 0x05	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 278:	28 eb       	ldi	r18, 0xB8	; 184
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	f9 01       	movw	r30, r18
 27e:	31 97       	sbiw	r30, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <main+0x4e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 282:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 284:	d9 f7       	brne	.-10     	; 0x27c <main+0x4c>
    _delay_ms(150);
	PORTC &= ~1<<5;
 286:	85 b3       	in	r24, 0x15	; 21
 288:	80 7c       	andi	r24, 0xC0	; 192
 28a:	85 bb       	out	0x15, r24	; 21
 28c:	8c ed       	ldi	r24, 0xDC	; 220
 28e:	95 e0       	ldi	r25, 0x05	; 5
 290:	28 eb       	ldi	r18, 0xB8	; 184
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	f9 01       	movw	r30, r18
 296:	31 97       	sbiw	r30, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <main+0x66>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 29a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 29c:	d9 f7       	brne	.-10     	; 0x294 <main+0x64>
	_delay_ms(150);
	PORTC |= 1<<5;
 29e:	ad 9a       	sbi	0x15, 5	; 21
 2a0:	8c ed       	ldi	r24, 0xDC	; 220
 2a2:	95 e0       	ldi	r25, 0x05	; 5
 2a4:	28 eb       	ldi	r18, 0xB8	; 184
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	f9 01       	movw	r30, r18
 2aa:	31 97       	sbiw	r30, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <main+0x7a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2ae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2b0:	d9 f7       	brne	.-10     	; 0x2a8 <main+0x78>
    _delay_ms(150);
	PORTC &= ~1<<5;
 2b2:	85 b3       	in	r24, 0x15	; 21
 2b4:	80 7c       	andi	r24, 0xC0	; 192
 2b6:	85 bb       	out	0x15, r24	; 21
 2b8:	8c ed       	ldi	r24, 0xDC	; 220
 2ba:	95 e0       	ldi	r25, 0x05	; 5
 2bc:	28 eb       	ldi	r18, 0xB8	; 184
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	f9 01       	movw	r30, r18
 2c2:	31 97       	sbiw	r30, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <main+0x92>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2c8:	d9 f7       	brne	.-10     	; 0x2c0 <main+0x90>
	_delay_ms(150);
	PORTC |= 1<<5;
 2ca:	ad 9a       	sbi	0x15, 5	; 21
 2cc:	8c ed       	ldi	r24, 0xDC	; 220
 2ce:	95 e0       	ldi	r25, 0x05	; 5
 2d0:	28 eb       	ldi	r18, 0xB8	; 184
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	f9 01       	movw	r30, r18
 2d6:	31 97       	sbiw	r30, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <main+0xa6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2da:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2dc:	d9 f7       	brne	.-10     	; 0x2d4 <main+0xa4>
    _delay_ms(150);
	PORTC &= ~1<<5;
 2de:	85 b3       	in	r24, 0x15	; 21
 2e0:	80 7c       	andi	r24, 0xC0	; 192
 2e2:	85 bb       	out	0x15, r24	; 21
 2e4:	8c ed       	ldi	r24, 0xDC	; 220
 2e6:	95 e0       	ldi	r25, 0x05	; 5
 2e8:	28 eb       	ldi	r18, 0xB8	; 184
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	f9 01       	movw	r30, r18
 2ee:	31 97       	sbiw	r30, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <main+0xbe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2f2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2f4:	d9 f7       	brne	.-10     	; 0x2ec <main+0xbc>
	_delay_ms(150);
	
	encode = (PINA>>7)+((PINA&0x40)>>5)+((PINA&0x20)>>3)+((PINA&0x10)>>1);
 2f6:	69 b3       	in	r22, 0x19	; 25
 2f8:	29 b3       	in	r18, 0x19	; 25
 2fa:	89 b3       	in	r24, 0x19	; 25
 2fc:	49 b3       	in	r20, 0x19	; 25
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	20 74       	andi	r18, 0x40	; 64
 302:	30 70       	andi	r19, 0x00	; 0
 304:	05 e0       	ldi	r16, 0x05	; 5
 306:	35 95       	asr	r19
 308:	27 95       	ror	r18
 30a:	0a 95       	dec	r16
 30c:	e1 f7       	brne	.-8      	; 0x306 <main+0xd6>
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	80 72       	andi	r24, 0x20	; 32
 312:	90 70       	andi	r25, 0x00	; 0
 314:	13 e0       	ldi	r17, 0x03	; 3
 316:	95 95       	asr	r25
 318:	87 95       	ror	r24
 31a:	1a 95       	dec	r17
 31c:	e1 f7       	brne	.-8      	; 0x316 <main+0xe6>
 31e:	12 2f       	mov	r17, r18
 320:	18 0f       	add	r17, r24
 322:	66 1f       	adc	r22, r22
 324:	66 27       	eor	r22, r22
 326:	66 1f       	adc	r22, r22
 328:	16 0f       	add	r17, r22
 32a:	50 e0       	ldi	r21, 0x00	; 0
 32c:	40 71       	andi	r20, 0x10	; 16
 32e:	50 70       	andi	r21, 0x00	; 0
 330:	55 95       	asr	r21
 332:	47 95       	ror	r20
 334:	14 0f       	add	r17, r20
	FEED_DOG;
 336:	88 b3       	in	r24, 0x18	; 24
 338:	90 e1       	ldi	r25, 0x10	; 16
 33a:	89 27       	eor	r24, r25
 33c:	88 bb       	out	0x18, r24	; 24
	if(encode == 0x0F)
 33e:	1f 30       	cpi	r17, 0x0F	; 15
 340:	09 f0       	breq	.+2      	; 0x344 <main+0x114>
 342:	51 c0       	rjmp	.+162    	; 0x3e6 <main+0x1b6>
 344:	10 e0       	ldi	r17, 0x00	; 0
 346:	c8 eb       	ldi	r28, 0xB8	; 184
 348:	d0 e0       	ldi	r29, 0x00	; 0
				Send595(0);
				_delay_ms(200);
				FEED_DOG;
			}
			_delay_ms(600);
			FEED_DOG;
 34a:	00 e1       	ldi	r16, 0x10	; 16
 34c:	2a c0       	rjmp	.+84     	; 0x3a2 <main+0x172>
		unsigned char i;
		while(1)
		{
			for(i=0;i<16;i++)
			{
				Send595(bit[i]);
 34e:	e1 2f       	mov	r30, r17
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	ee 0f       	add	r30, r30
 354:	ff 1f       	adc	r31, r31
 356:	ee 0f       	add	r30, r30
 358:	ff 1f       	adc	r31, r31
 35a:	e4 59       	subi	r30, 0x94	; 148
 35c:	ff 4f       	sbci	r31, 0xFF	; 255
 35e:	60 81       	ld	r22, Z
 360:	71 81       	ldd	r23, Z+1	; 0x01
 362:	82 81       	ldd	r24, Z+2	; 0x02
 364:	93 81       	ldd	r25, Z+3	; 0x03
 366:	0e 94 b2 00 	call	0x164	; 0x164 <Send595>
				BEEP_100MS;
 36a:	ad 9a       	sbi	0x15, 5	; 21
 36c:	88 e9       	ldi	r24, 0x98	; 152
 36e:	98 e0       	ldi	r25, 0x08	; 8
 370:	fe 01       	movw	r30, r28
 372:	31 97       	sbiw	r30, 0x01	; 1
 374:	f1 f7       	brne	.-4      	; 0x372 <main+0x142>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 376:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 378:	d9 f7       	brne	.-10     	; 0x370 <main+0x140>
 37a:	85 b3       	in	r24, 0x15	; 21
 37c:	80 7c       	andi	r24, 0xC0	; 192
 37e:	85 bb       	out	0x15, r24	; 21
				Send595(0);
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	70 e0       	ldi	r23, 0x00	; 0
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 b2 00 	call	0x164	; 0x164 <Send595>
 38c:	80 ed       	ldi	r24, 0xD0	; 208
 38e:	97 e0       	ldi	r25, 0x07	; 7
 390:	fe 01       	movw	r30, r28
 392:	31 97       	sbiw	r30, 0x01	; 1
 394:	f1 f7       	brne	.-4      	; 0x392 <main+0x162>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 396:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 398:	d9 f7       	brne	.-10     	; 0x390 <main+0x160>
				_delay_ms(200);
				FEED_DOG;
 39a:	88 b3       	in	r24, 0x18	; 24
 39c:	80 27       	eor	r24, r16
 39e:	88 bb       	out	0x18, r24	; 24
	if(encode == 0x0F)
	{
		unsigned char i;
		while(1)
		{
			for(i=0;i<16;i++)
 3a0:	1f 5f       	subi	r17, 0xFF	; 255
 3a2:	10 31       	cpi	r17, 0x10	; 16
 3a4:	a0 f2       	brcs	.-88     	; 0x34e <main+0x11e>
 3a6:	80 e7       	ldi	r24, 0x70	; 112
 3a8:	97 e1       	ldi	r25, 0x17	; 23
 3aa:	fe 01       	movw	r30, r28
 3ac:	31 97       	sbiw	r30, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <main+0x17c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3b0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3b2:	d9 f7       	brne	.-10     	; 0x3aa <main+0x17a>
				Send595(0);
				_delay_ms(200);
				FEED_DOG;
			}
			_delay_ms(600);
			FEED_DOG;
 3b4:	88 b3       	in	r24, 0x18	; 24
 3b6:	80 27       	eor	r24, r16
 3b8:	88 bb       	out	0x18, r24	; 24
 3ba:	80 e7       	ldi	r24, 0x70	; 112
 3bc:	97 e1       	ldi	r25, 0x17	; 23
 3be:	fe 01       	movw	r30, r28
 3c0:	31 97       	sbiw	r30, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <main+0x190>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3c4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3c6:	d9 f7       	brne	.-10     	; 0x3be <main+0x18e>
			_delay_ms(600);
			FEED_DOG;
 3c8:	88 b3       	in	r24, 0x18	; 24
 3ca:	80 27       	eor	r24, r16
 3cc:	88 bb       	out	0x18, r24	; 24
 3ce:	80 e7       	ldi	r24, 0x70	; 112
 3d0:	97 e1       	ldi	r25, 0x17	; 23
 3d2:	fe 01       	movw	r30, r28
 3d4:	31 97       	sbiw	r30, 0x01	; 1
 3d6:	f1 f7       	brne	.-4      	; 0x3d4 <main+0x1a4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3da:	d9 f7       	brne	.-10     	; 0x3d2 <main+0x1a2>
			_delay_ms(600);
			FEED_DOG;
 3dc:	88 b3       	in	r24, 0x18	; 24
 3de:	80 27       	eor	r24, r16
 3e0:	88 bb       	out	0x18, r24	; 24
 3e2:	10 e0       	ldi	r17, 0x00	; 0
 3e4:	b4 cf       	rjmp	.-152    	; 0x34e <main+0x11e>
			
		}
	}
    while(1)
    {	
		FEED_DOG;
 3e6:	f0 e1       	ldi	r31, 0x10	; 16
 3e8:	9f 2e       	mov	r9, r31
 3ea:	e8 eb       	ldi	r30, 0xB8	; 184
 3ec:	ae 2e       	mov	r10, r30
 3ee:	b1 2c       	mov	r11, r1
							break;
						}
						case 2:			// check key state
						{
							cBuf[1] = rBuf[1];		// key board code
							memset(&cBuf[2],0x00,3);
 3f0:	78 e6       	ldi	r23, 0x68	; 104
 3f2:	c7 2e       	mov	r12, r23
 3f4:	70 e0       	ldi	r23, 0x00	; 0
 3f6:	d7 2e       	mov	r13, r23
 3f8:	03 e0       	ldi	r16, 0x03	; 3
							
							for(i=0;i<24;i++)
								cBuf[4-i/8] |= (key_stat[i]<<(i%8));
 3fa:	64 e0       	ldi	r22, 0x04	; 4
 3fc:	e6 2e       	mov	r14, r22
 3fe:	f1 2c       	mov	r15, r1
			
		}
	}
    while(1)
    {	
		FEED_DOG;
 400:	88 b3       	in	r24, 0x18	; 24
 402:	89 25       	eor	r24, r9
 404:	88 bb       	out	0x18, r24	; 24
        if(U0Ready)
 406:	80 91 d4 00 	lds	r24, 0x00D4
 40a:	88 23       	and	r24, r24
 40c:	09 f4       	brne	.+2      	; 0x410 <main+0x1e0>
 40e:	85 c0       	rjmp	.+266    	; 0x51a <__stack+0xbb>
        {
            //if(U0Count == 5)
            {
				if(rBuf[1] == encode)		// encode right
 410:	80 91 d7 00 	lds	r24, 0x00D7
 414:	81 17       	cp	r24, r17
 416:	09 f0       	breq	.+2      	; 0x41a <main+0x1ea>
 418:	7a c0       	rjmp	.+244    	; 0x50e <__stack+0xaf>
				{
					if(rBuf[0]==0xFA && rBuf[4]==0xFF)
 41a:	80 91 d6 00 	lds	r24, 0x00D6
 41e:	8a 3f       	cpi	r24, 0xFA	; 250
 420:	09 f0       	breq	.+2      	; 0x424 <main+0x1f4>
 422:	75 c0       	rjmp	.+234    	; 0x50e <__stack+0xaf>
 424:	80 91 da 00 	lds	r24, 0x00DA
 428:	8f 3f       	cpi	r24, 0xFF	; 255
 42a:	09 f0       	breq	.+2      	; 0x42e <main+0x1fe>
 42c:	70 c0       	rjmp	.+224    	; 0x50e <__stack+0xaf>
					{
						switch(rBuf[2])
 42e:	80 91 d8 00 	lds	r24, 0x00D8
 432:	81 30       	cpi	r24, 0x01	; 1
 434:	21 f0       	breq	.+8      	; 0x43e <main+0x20e>
 436:	82 30       	cpi	r24, 0x02	; 2
 438:	09 f0       	breq	.+2      	; 0x43c <main+0x20c>
 43a:	69 c0       	rjmp	.+210    	; 0x50e <__stack+0xaf>
 43c:	3c c0       	rjmp	.+120    	; 0x4b6 <__stack+0x57>
						{
						case 1:			// control
						{
							keyBit = rBuf[3];
 43e:	80 91 d9 00 	lds	r24, 0x00D9
 442:	c8 2f       	mov	r28, r24
 444:	d0 e0       	ldi	r29, 0x00	; 0
							if(keyBit < 24)
 446:	c8 31       	cpi	r28, 0x18	; 24
 448:	d1 05       	cpc	r29, r1
 44a:	08 f0       	brcs	.+2      	; 0x44e <main+0x21e>
 44c:	60 c0       	rjmp	.+192    	; 0x50e <__stack+0xaf>
							{
								Send595(bit[keyBit]);
 44e:	fe 01       	movw	r30, r28
 450:	ee 0f       	add	r30, r30
 452:	ff 1f       	adc	r31, r31
 454:	ee 0f       	add	r30, r30
 456:	ff 1f       	adc	r31, r31
 458:	e4 59       	subi	r30, 0x94	; 148
 45a:	ff 4f       	sbci	r31, 0xFF	; 255
 45c:	60 81       	ld	r22, Z
 45e:	71 81       	ldd	r23, Z+1	; 0x01
 460:	82 81       	ldd	r24, Z+2	; 0x02
 462:	93 81       	ldd	r25, Z+3	; 0x03
 464:	0e 94 b2 00 	call	0x164	; 0x164 <Send595>
								BEEP_100MS;
 468:	ad 9a       	sbi	0x15, 5	; 21
 46a:	88 e9       	ldi	r24, 0x98	; 152
 46c:	98 e0       	ldi	r25, 0x08	; 8
 46e:	f5 01       	movw	r30, r10
 470:	31 97       	sbiw	r30, 0x01	; 1
 472:	f1 f7       	brne	.-4      	; 0x470 <__stack+0x11>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 474:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 476:	d9 f7       	brne	.-10     	; 0x46e <__stack+0xf>
 478:	85 b3       	in	r24, 0x15	; 21
 47a:	80 7c       	andi	r24, 0xC0	; 192
 47c:	85 bb       	out	0x15, r24	; 21
								Send595(0);
 47e:	60 e0       	ldi	r22, 0x00	; 0
 480:	70 e0       	ldi	r23, 0x00	; 0
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	0e 94 b2 00 	call	0x164	; 0x164 <Send595>
								KeyScan();
 48a:	0e 94 cc 00 	call	0x198	; 0x198 <KeyScan>
								sBuf[1] = rBuf[1];
 48e:	80 91 d7 00 	lds	r24, 0x00D7
 492:	80 93 61 00 	sts	0x0061, r24
								sBuf[2] = rBuf[2];
 496:	80 91 d8 00 	lds	r24, 0x00D8
 49a:	80 93 62 00 	sts	0x0062, r24
								sBuf[3] = rBuf[3];		// key number
 49e:	80 91 d9 00 	lds	r24, 0x00D9
 4a2:	80 93 63 00 	sts	0x0063, r24
								sBuf[4] = key_stat[keyBit];
 4a6:	c5 51       	subi	r28, 0x15	; 21
 4a8:	df 4f       	sbci	r29, 0xFF	; 255
 4aa:	88 81       	ld	r24, Y
 4ac:	80 93 64 00 	sts	0x0064, r24
								R485Send(sBuf,6);
 4b0:	80 e6       	ldi	r24, 0x60	; 96
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	29 c0       	rjmp	.+82     	; 0x508 <__stack+0xa9>
							}
							break;
						}
						case 2:			// check key state
						{
							cBuf[1] = rBuf[1];		// key board code
 4b6:	10 93 67 00 	sts	0x0067, r17
							memset(&cBuf[2],0x00,3);
 4ba:	f6 01       	movw	r30, r12
 4bc:	80 2f       	mov	r24, r16
 4be:	11 92       	st	Z+, r1
 4c0:	8a 95       	dec	r24
 4c2:	e9 f7       	brne	.-6      	; 0x4be <__stack+0x5f>
 4c4:	40 e0       	ldi	r20, 0x00	; 0
 4c6:	50 e0       	ldi	r21, 0x00	; 0
							
							for(i=0;i<24;i++)
								cBuf[4-i/8] |= (key_stat[i]<<(i%8));
 4c8:	84 2f       	mov	r24, r20
 4ca:	86 95       	lsr	r24
 4cc:	86 95       	lsr	r24
 4ce:	86 95       	lsr	r24
 4d0:	d7 01       	movw	r26, r14
 4d2:	a8 1b       	sub	r26, r24
 4d4:	b1 09       	sbc	r27, r1
 4d6:	aa 59       	subi	r26, 0x9A	; 154
 4d8:	bf 4f       	sbci	r27, 0xFF	; 255
 4da:	fa 01       	movw	r30, r20
 4dc:	e5 51       	subi	r30, 0x15	; 21
 4de:	ff 4f       	sbci	r31, 0xFF	; 255
 4e0:	80 81       	ld	r24, Z
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	9a 01       	movw	r18, r20
 4e6:	27 70       	andi	r18, 0x07	; 7
 4e8:	30 70       	andi	r19, 0x00	; 0
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <__stack+0x91>
 4ec:	88 0f       	add	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	2a 95       	dec	r18
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <__stack+0x8d>
 4f4:	2c 91       	ld	r18, X
 4f6:	28 2b       	or	r18, r24
 4f8:	2c 93       	st	X, r18
 4fa:	4f 5f       	subi	r20, 0xFF	; 255
 4fc:	5f 4f       	sbci	r21, 0xFF	; 255
						case 2:			// check key state
						{
							cBuf[1] = rBuf[1];		// key board code
							memset(&cBuf[2],0x00,3);
							
							for(i=0;i<24;i++)
 4fe:	48 31       	cpi	r20, 0x18	; 24
 500:	51 05       	cpc	r21, r1
 502:	11 f7       	brne	.-60     	; 0x4c8 <__stack+0x69>
								cBuf[4-i/8] |= (key_stat[i]<<(i%8));
								
							R485Send(cBuf,6);
 504:	86 e6       	ldi	r24, 0x66	; 102
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	66 e0       	ldi	r22, 0x06	; 6
 50a:	0e 94 64 00 	call	0xc8	; 0xc8 <R485Send>
							break;
						}
					}
				}
            }
            U0Ready = U0Count = 0;
 50e:	10 92 d5 00 	sts	0x00D5, r1
 512:	80 91 d5 00 	lds	r24, 0x00D5
 516:	80 93 d4 00 	sts	0x00D4, r24
        }
        KeyScan();
 51a:	0e 94 cc 00 	call	0x198	; 0x198 <KeyScan>
 51e:	70 cf       	rjmp	.-288    	; 0x400 <main+0x1d0>

00000520 <_exit>:
 520:	f8 94       	cli

00000522 <__stop_program>:
 522:	ff cf       	rjmp	.-2      	; 0x522 <__stop_program>
