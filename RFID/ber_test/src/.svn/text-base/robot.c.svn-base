#include "../inc/main.h"
#include "../inc/robot.h"

char date[15] = {0};

// static int DESCrc(unsigned char* plainBlock,unsigned char* cipherBlock,int len);
static int PhoneCheck(int rfd,char* phone);
int GetRFD(int mfd)
{
	return hInfo[mInfo[mfd].hiv].rhiv;
}

int DateReq(int rfd,unsigned char* rBuf)
{
	int i,j,result;
	unsigned char bPack[14] = {0};
	unsigned char plainBlock[8] = { 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff };		// 明文
	unsigned char cipherBlock[8] = {0};

	memcpy(cipherBlock,&rBuf[7],8);	// id DES
	result = CodeValid(plainBlock,cipherBlock);

//	r_printf("Date req: %d\n",result);
	if(result && test)
	{
		RPBack(0xEE01,bPack,14);
		gtime(date);
		for(i=0,j=7; j<13; i++,j++)
		{
			bPack[j] = ((int)date[i]-48)*10;
			bPack[j] += ((int)date[++i]-48);
		}
	}
	else if(test)
		RPBack(0xEE02,bPack,14);
	else
		RPBack(0xEE03,bPack,14);
	if(_write(rfd,bPack,14))
		return 1;
	else
		return 0;
}

int PhoneCheck(int rfd,char* phone)
{
	char sql[256] = { 0 };
	int rs = 0;
	char temp[12] = {0};
	snprintf(sql,sizeof(sql),"select R_PHONE from t_user_info where R_SN = '%s' and R_MASTER = 1",rInfo[rfd].id);
	rs = CheckOneItem(temp,sql,12);
	if(rs)
		memcpy(phone,&temp[1],11);
	return rs;
}

int UserOnlineInfo(int rfd)
{
	char sql[256] = { 0 };
	unsigned int nPos;
	int mfd,cum,i,rs;			// client user number
	char phone[MUN][12] = {{0}};
	unsigned char *pack;
	unsigned char dec[6] = { 0 };
	nPos = rInfo[rfd].hiv;
	cum = hInfo[nPos].mcun;
	if(hInfo[nPos].mhiv[0] != 0)
	{
		for(i=0; i<cum; i++)
		{
			mfd = hInfo[nPos].mhiv[i];
			if(mfd != 0)
			{
				if(mInfo[mfd].user[0] != 0)
				{
					memset(sql,0x00,256);
					snprintf(sql,sizeof(sql),"select R_PHONE from t_user_info where R_USER = '%s'",mInfo[mfd].user);
					rs = CheckOneItem(phone[i],sql,12);
				}
			}
		}
	}

	pack = (unsigned char *)malloc(sizeof(unsigned char)*(10+6*cum));
	memset(pack,0x00,10+6*cum);

	pack[0] = 0xfd;
	pack[3] = UFP->version[0];
	pack[4] = UFP->version[1];
	pack[5] = 0x00;
	pack[6] = 0x10;
	pack[7] = 0x00;
	pack[8] = 0x20;

	if(cum > 0)
	{
		for(i=0;i<cum;i++)
		{
			StringToHex(dec,phone[i]);
			memcpy(&pack[9+6*i],dec,6);
			memset(dec,0x00,6);
		}
		pack[9+cum*6] = 0xff;
		pack[1]	= ((cum*6+10) & 0xFF00) >> 8;
		pack[2] = (cum*6+10) & 0xFF;
		rs = _write(rfd,pack,10+cum*6);
	}
	else
	{
		pack[1]	= 0x00;
		pack[2] = 0x0A;
		pack[9] = 0xff;
		rs = _write(rfd,pack,10);
	}
	free(pack);
	return rs;
}

int RobotInit(int rfd,unsigned char* rBuf)
{
	int rb,index;
	char sn[17] = {0};
	char sql[512] = {0};
	char alias[17] = {0};
	char dir[128] = {0};
	unsigned char plainBlock[8] = {0};
	unsigned char cipherBlock[8] = {0};
	unsigned char decrypt[8] = {0};
	unsigned char pack[12] = {0};

	memcpy(plainBlock,&rBuf[9],8);		// ID
	memcpy(cipherBlock,&rBuf[17],8);	// ID DES
	memcpy(rInfo[rfd].lip,&rBuf[25],4);	// locale IP address

	HexToString(sn,plainBlock,8);
	HexToString(alias,cipherBlock,8);

	if(CodeValid(plainBlock,cipherBlock))		// Matching ID
	{
		index = GetHashTablePos(sn,RidHash,MHI);
		if(index == 0)
		{
			snprintf(sql,sizeof(sql),"insert into t_robot_info (n_mac,n_prefix,n_id,n_push_alias,n_arm_ver,n_reg_time) values ('%s',Floor((select count(n_mac) from t_robot_info)/40),seq_robot.nextVal,'%s','%d',to_char(sysdate,'yyyy-mm-dd hh24:mi:ss'))",sn,alias,rBuf[3]);
			s_printf("robot register SQL: %s\n",sql);

			if(OciInsert(sql))
			{
				rb = 0x107;		// success
				index = InsertHash(sn,RidHash,MHI);
				rInfo[rfd].hiv = index; 				// insert hash table
				hInfo[index].rhiv = rfd;				// storage rfd hash
				rInfo[rfd].tflag = rfd;					// set socket online flag
				lprintf(lfd, INFO, "Robot: ID [%s] initialization success!",sn);

				DES_Encrypt(plainBlock,(unsigned char *)KEY,decrypt,8);
				HexToString(alias,decrypt,8);
				memcpy(rInfo[rfd].alias,alias,16);
				memcpy(rInfo[rfd].id,sn,16);
				otInfo[index].version = rBuf[3];
				memset(otInfo[index].alias,0x00,17);
				memcpy(otInfo[index].alias,alias,16);
				AInfoCheck(rfd);
				atomic_inc(R_CON_NUM);

			}
			else
			{
				rb = 0x106;		// database problem
				lprintf(lfd, FATAL, "Robot: initialization failed, insert abnormal!");
			}
		}
		else				// already register
			rb = 0x109;		// already initialization
	}
	else	// ID encryption error
	{
		rb = 0x108;		//ID error
		lprintf(lfd, WARN, "Robot: Receive a abnormal initialization [%s] from robot client!",sn);
	}

	BackPacket(rb,pack,1,14,0);
	_write(rfd,pack,14);				// robot initialization back packet

	if(rb == 0x107)
	{
		UpdateRid();			// update ID
		snprintf(dir,sizeof(dir),"%s%s",V_PATH,sn);		// create video dir
		mkdir(dir,S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH | S_IXOTH | S_IXGRP | S_IRWXU); 	// create user direct
	}
	return rb;
}

int RobotReg(int rfd,unsigned char* rBuf)		// robot online register
{
	int rb,index;
	char sn[17] = {0};
	char alias[17] = {0};
	unsigned char plainBlock[8] = {0};
	unsigned char cipherBlock[8] = {0};
	unsigned char decrypt[8] = {0};
	struct timeval ntime;

	memcpy(plainBlock,&rBuf[9],8);		// ID
	memcpy(cipherBlock,&rBuf[17],8);	// ID DES
	memcpy(rInfo[rfd].lip,&rBuf[25],4);	// locale IP address
	HexToString(sn,plainBlock,8);
//	printf("lip: %d.%d.%d.%d\n",rInfo[rfd].lip[0],rInfo[rfd].lip[1],rInfo[rfd].lip[2],rInfo[rfd].lip[3]);
	r_printf("Robot sn: %s\n",sn);
//	printf("robot index: %d\n",index);

	if(CodeValid(plainBlock,cipherBlock))		// Matching ID
	{
		index = GetHashTablePos(sn,RidHash,MHI);
		if(index == 0)							// not register
		{
			rb = RobotInit(rfd,rBuf);
			if(rb == 0x107)						// register success
				rb = 0x101;
		}
		else									// already register
		{
			rInfo[rfd].version = rBuf[3];
			otInfo[index].version = rBuf[3];
			if(rInfo[hInfo[index].rhiv].tfd == 0)			// first login
				lprintf(lfd, INFO, "Robot: [%s] [%s] link up success!",sn,rInfo[rfd].ip);
			else											// login again
			{
				rInfo[hInfo[index].rhiv].cflag = -2;		// close last socket
				gettimeofday(&ntime, NULL);
				rInfo[hInfo[index].rhiv].cntime = (ntime.tv_sec - ROBOT_HEART_TIME);
				lprintf(lfd, INFO, "Robot: [%s] connection update success!",sn);
			}
			rb = 0x101;
			rInfo[rfd].tflag = rfd;				// set new client info or set socket online flag
			hInfo[index].rhiv = rfd;			// change  hash index value or storage rfd hash
			rInfo[rfd].hiv = index;
//			printf("index: %d\n",index);
			DES_Encrypt(plainBlock,(unsigned char *)KEY,decrypt,8);
			// HexToString(alias,cipherBlock,8);
			HexToString(alias,decrypt,8);

			memcpy(rInfo[rfd].alias,alias,16);
			memcpy(rInfo[rfd].id,sn,16);
			memset(otInfo[index].alias,0x00,17);
			memcpy(otInfo[index].alias,alias,16);

			AInfoCheck(rfd);
			atomic_inc(R_CON_NUM);
		}
	}
	else
	{
		rb = 0x103;		// id error
		lprintf(lfd, WARN, "Robot: Receive a abnormal register [%s] from robot client!",sn);
	}
	rRegBack(rfd,rb);
	PhoneCheck(rfd,rInfo[rfd].mPhone);
	return rb;
}

int rCrtBack(int rfd,unsigned char* rBuf,unsigned char len)		// robot control back
{
	int mNum,nPos,i;
//	unsigned char pack[10+APP_KEY_LEN] = {0};
//	memcpy(pack,rBuf,len);
	nPos = GetHashTablePos(rInfo[rfd].id,RidHash,MHI);
	mNum = GetMfdNum(nPos);
//	printf("mNum: %d\n",mNum);
	for(i=0;i<mNum;i++)								// back state to user that all client
	{
//		memcpy(pack,rBuf,len);
//		memcpy(&pack[len-1],mInfo[hInfo[nPos].mhiv[i]].aKey,APP_KEY_LEN);
//		pack[10+APP_KEY_LEN-1] = 0xff;
//		pack[2] = APP_KEY_LEN + pack[2];
//		_m_write(hInfo[nPos].mhiv[i],pack,len+APP_KEY_LEN);
		_m_write(hInfo[nPos].mhiv[i],rBuf,len);
	}
	return 1;
}

int rP2pBack(int rfd,unsigned char* pack,unsigned char len)
{
	int mNum,nPos,i;
	nPos = GetHashTablePos(rInfo[rfd].id,RidHash,MHI);
	mNum = GetMfdNum(nPos);
	for(i=0;i<mNum;i++)								// back state to user that all client
	{
		_m_write(hInfo[nPos].mhiv[i],pack,len);
	}
	return 1;
}

int rRegBack(int rfd,int stat)		//robot register back
{
	unsigned char pack[14] = {0};
	BackPacket(stat,pack,1,14,0);
	_write(rfd,pack,14);				// robot register back packet
	if(stat == 0x101)
	{
		if(UserOnlineInfo(rfd))
			return 1;
		else
			return 0;
	}
	return 1;
}

int RobotCT(int mfd,unsigned char* rBuf,int rLen)		// robot
{
	int nPos;
	int rfd;
	nPos = mInfo[mfd].hiv;
	rfd = hInfo[nPos].rhiv;
	if(rfd != 0)
	{
		if(!_write(rfd,rBuf,rLen))
		{
			ResetRClient(rfd);
			return 0x300;
		}
		else
			return 0x301;
	}
	else
		return 0x300;
}

int RobotAlive(int rfd,unsigned char* rBuf)		// robot Keep Alive
{
	char sn[17] = {0};
	unsigned char plainBlock[8] = {0};
	unsigned char cipherBlock[8] = {0};

	memcpy(plainBlock,&rBuf[9],8);
	memcpy(cipherBlock,&rBuf[17],8);

	HexToString(sn,plainBlock,8);
	if(CodeValid(plainBlock,cipherBlock))		//
	{
		if(rInfo[rfd].tflag != 0)		// already register
			if (rInfo[rfd].hiv == GetHashTablePos(sn,RidHash,MHI))	// ID already insert into hash table
				return 1;
	}
	return 0;
}

int UpdateRid(void)			// update robot id
{
	int j,k,rs,index=0,pos;
	char id[17] = {0};
	char prefix[4] = {0};
	char *p = NULL;
	char *sql = "select n_arm_ver,n_prefix,n_mac from t_robot_info";
	const char pattern[2] = { 0x01 };
	CHECK_DATA *head = (CHECK_DATA *)malloc(sizeof(CHECK_DATA));
	memset(head , 0x00, sizeof(CHECK_DATA));
	sem_wait(&sem_or);
	rs = OciCheck(sql,head);
	sem_post(&sem_or);
	if(rs != -1)
	{
		if(head != NULL)
		{
			if(rs > 0)		// Multiple row
			{
				while (head->next != NULL)
				{
STAR:
					j = k = 0;
					memset(id,0x00,17);
					memset(prefix,0x00,4);
					head = head->next;
					p = head->buf;
					pos = kmp(p,pattern);
					if(pos==16)
					{
						memcpy(id,p,pos);
						p += pos+1;
						index = InsertHash(id, RidHash,MHI);
					}
					else if(pos == -1)
						goto STAR;
					pos = kmp(p,pattern);
					if(pos == -1)
						goto STAR;
					else if(pos<4)
					{
						memcpy(prefix,p,pos);
						p += pos+1;
					}
					rs = atoi(p);
					if(index != 0)
						otInfo[index].version = (rs>7)?0:rs;
//					r_printf("sn [%s] ver: %d\n",id,otInfo[index].version);
//					lprintf(lfd, INFO, "Robot: ID [%s] update success!",id);
				}
				lprintf(lfd, INFO, "Robot: ID update success!");
			}
		}
	}
	else
		lprintf(lfd, FATAL, "Robot: OCI check and robot id update failed!");
	FreeRS(head);
	return 1;
}

int DESCrc(unsigned char* plainBlock,unsigned char* cipherBlock,int len)
{
	int count=0;
	while(len--)
		count += (*(plainBlock++))^(*(cipherBlock++));
	if(count)
		return 0;
	else
		return 1;
}

int CodeValid(unsigned char* plainBlock,unsigned char* cipherBlock)
{
	unsigned char encBlock[8] = {0};
	DES_Decrypt(cipherBlock,(unsigned char *)KEY,encBlock);
	if(DESCrc(plainBlock,encBlock,8))
		return 1;
	else
		return 0;
}

int RPBack(unsigned int stat,unsigned char *pack,int len)
{
	pack[0] = 0xfd;
	pack[1] = (len & 0xFF00) >> 8;
	pack[2] = len & 0xFF;
	pack[3] = UFP->version[0];
	pack[4] = UFP->version[1];
	pack[5] = stat >> 8;
	pack[6] = stat & 0xFF;
	pack[len-1] = 0xff;
	return 1;
}



