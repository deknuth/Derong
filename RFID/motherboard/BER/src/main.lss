
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000026  00800100  00800100  0000046c  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000e7  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000008af  00000000  00000000  00000573  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000248  00000000  00000000  00000e22  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000606  00000000  00000000  0000106a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000b0  00000000  00000000  00001670  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000019e  00000000  00000000  00001720  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000039c  00000000  00000000  000018be  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00001c5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	43 c0       	rjmp	.+134    	; 0xac <__vector_18>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a6 32       	cpi	r26, 0x26	; 38
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	77 d1       	rcall	.+750    	; 0x340 <main>
  52:	d0 c1       	rjmp	.+928    	; 0x3f4 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <PortInit>:

volatile unsigned char dir = 0;

void PortInit(void)
{
    DDRB = 0B00000111;
  56:	87 e0       	ldi	r24, 0x07	; 7
  58:	84 b9       	out	0x04, r24	; 4
    PORTB= 0B00000110;
  5a:	86 e0       	ldi	r24, 0x06	; 6
  5c:	85 b9       	out	0x05, r24	; 5
    PINB = 0x00;
  5e:	13 b8       	out	0x03, r1	; 3

    DDRD = 0B11110000;
  60:	80 ef       	ldi	r24, 0xF0	; 240
  62:	8a b9       	out	0x0a, r24	; 10
    PORTD= 0B00000000;
  64:	1b b8       	out	0x0b, r1	; 11
    PIND = 0x00;
  66:	19 b8       	out	0x09, r1	; 9

    DDRC = 0B00111111;
  68:	8f e3       	ldi	r24, 0x3F	; 63
  6a:	87 b9       	out	0x07, r24	; 7
    PORTC= 0B00111111;
  6c:	88 b9       	out	0x08, r24	; 8
    PINC = 0x00;
  6e:	16 b8       	out	0x06, r1	; 6
}
  70:	08 95       	ret

00000072 <UartInit>:

void UartInit(void)
{
    UBRR0H = (F_CPU / BAUD / 16 - 1) / 256;
  72:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = (F_CPU / BAUD / 16 - 1) % 256;
  76:	83 e0       	ldi	r24, 0x03	; 3
  78:	80 93 c4 00 	sts	0x00C4, r24
    UCSR0B = 1<<RXEN0 | 1<<TXEN0 | 1<<RXCIE0;
  7c:	88 e9       	ldi	r24, 0x98	; 152
  7e:	80 93 c1 00 	sts	0x00C1, r24
    UCSR0C = 1<<UCSZ00 | 1<<UCSZ01;
  82:	86 e0       	ldi	r24, 0x06	; 6
  84:	80 93 c2 00 	sts	0x00C2, r24
}
  88:	08 95       	ret

0000008a <SendStr>:

void SendStr(unsigned char* data,unsigned char len)
{
  8a:	58 2f       	mov	r21, r24
  8c:	28 2f       	mov	r18, r24
  8e:	39 2f       	mov	r19, r25
  90:	f9 01       	movw	r30, r18
  92:	07 c0       	rjmp	.+14     	; 0xa2 <SendStr+0x18>
    unsigned char i;
    for(i=0; i<len; i++)
    {
        while(!(UCSR0A & (1 << UDRE0)));
  94:	80 91 c0 00 	lds	r24, 0x00C0
  98:	85 ff       	sbrs	r24, 5
  9a:	fc cf       	rjmp	.-8      	; 0x94 <SendStr+0xa>
        UDR0 = *(data++);
  9c:	81 91       	ld	r24, Z+
  9e:	80 93 c6 00 	sts	0x00C6, r24
}

void SendStr(unsigned char* data,unsigned char len)
{
    unsigned char i;
    for(i=0; i<len; i++)
  a2:	8e 2f       	mov	r24, r30
  a4:	85 1b       	sub	r24, r21
  a6:	86 17       	cp	r24, r22
  a8:	a8 f3       	brcs	.-22     	; 0x94 <SendStr+0xa>
    {
        while(!(UCSR0A & (1 << UDRE0)));
        UDR0 = *(data++);
    }
}
  aa:	08 95       	ret

000000ac <__vector_18>:
volatile unsigned char U0Ready = 0;
unsigned char U0Buf[32] = {0};
volatile unsigned char U0Count = 0;

ISR(USART_RX_vect)
{
  ac:	1f 92       	push	r1
  ae:	0f 92       	push	r0
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	0f 92       	push	r0
  b4:	11 24       	eor	r1, r1
  b6:	2f 93       	push	r18
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
  bc:	ef 93       	push	r30
  be:	ff 93       	push	r31
	word = UDR0;
  c0:	20 91 c6 00 	lds	r18, 0x00C6
  c4:	20 93 01 01 	sts	0x0101, r18
	if(word == 0xA0)
  c8:	20 3a       	cpi	r18, 0xA0	; 160
  ca:	39 f4       	brne	.+14     	; 0xda <__vector_18+0x2e>
	{
		if(!U0Ready)
  cc:	80 91 04 01 	lds	r24, 0x0104
  d0:	88 23       	and	r24, r24
  d2:	19 f4       	brne	.+6      	; 0xda <__vector_18+0x2e>
			start = 1;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	80 93 02 01 	sts	0x0102, r24
	}
	if(start)
  da:	80 91 02 01 	lds	r24, 0x0102
  de:	88 23       	and	r24, r24
  e0:	79 f1       	breq	.+94     	; 0x140 <__vector_18+0x94>
	{
		U0Buf[U0Count++] = word;
  e2:	80 91 25 01 	lds	r24, 0x0125
  e6:	e8 2f       	mov	r30, r24
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	eb 5f       	subi	r30, 0xFB	; 251
  ec:	fe 4f       	sbci	r31, 0xFE	; 254
  ee:	20 83       	st	Z, r18
  f0:	8f 5f       	subi	r24, 0xFF	; 255
  f2:	80 93 25 01 	sts	0x0125, r24
		if(U0Count == zLen)
  f6:	90 91 25 01 	lds	r25, 0x0125
  fa:	80 91 03 01 	lds	r24, 0x0103
  fe:	98 17       	cp	r25, r24
 100:	89 f4       	brne	.+34     	; 0x124 <__vector_18+0x78>
		{	
			if(U0Count > 15)
 102:	80 91 25 01 	lds	r24, 0x0125
 106:	80 31       	cpi	r24, 0x10	; 16
 108:	20 f0       	brcs	.+8      	; 0x112 <__vector_18+0x66>
				U0Ready = 1;
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	80 93 04 01 	sts	0x0104, r24
 110:	02 c0       	rjmp	.+4      	; 0x116 <__vector_18+0x6a>
			else
				U0Count = 0;
 112:	10 92 25 01 	sts	0x0125, r1
			start = zLen = 0;
 116:	10 92 03 01 	sts	0x0103, r1
 11a:	80 91 03 01 	lds	r24, 0x0103
 11e:	80 93 02 01 	sts	0x0102, r24
 122:	0e c0       	rjmp	.+28     	; 0x140 <__vector_18+0x94>
		}
		else if(U0Count == 2)
 124:	80 91 25 01 	lds	r24, 0x0125
 128:	82 30       	cpi	r24, 0x02	; 2
 12a:	51 f4       	brne	.+20     	; 0x140 <__vector_18+0x94>
		{
			if(word < 20)		// 协议最大长度
 12c:	24 31       	cpi	r18, 0x14	; 20
 12e:	20 f4       	brcc	.+8      	; 0x138 <__vector_18+0x8c>
				zLen = (word+2);
 130:	2e 5f       	subi	r18, 0xFE	; 254
 132:	20 93 03 01 	sts	0x0103, r18
 136:	04 c0       	rjmp	.+8      	; 0x140 <__vector_18+0x94>
			else
			{
				U0Count = 0;
 138:	10 92 25 01 	sts	0x0125, r1
				start = 0;
 13c:	10 92 02 01 	sts	0x0102, r1
			}
		}
	}
}
 140:	ff 91       	pop	r31
 142:	ef 91       	pop	r30
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	2f 91       	pop	r18
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <WG_send_bit_1>:

void WG_send_bit_1(unsigned char channel)
{
	switch(channel)
 154:	81 30       	cpi	r24, 0x01	; 1
 156:	a1 f0       	breq	.+40     	; 0x180 <WG_send_bit_1+0x2c>
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	30 f0       	brcs	.+12     	; 0x168 <WG_send_bit_1+0x14>
 15c:	82 30       	cpi	r24, 0x02	; 2
 15e:	e9 f0       	breq	.+58     	; 0x19a <WG_send_bit_1+0x46>
 160:	83 30       	cpi	r24, 0x03	; 3
 162:	09 f0       	breq	.+2      	; 0x166 <WG_send_bit_1+0x12>
 164:	34 c0       	rjmp	.+104    	; 0x1ce <WG_send_bit_1+0x7a>
 166:	26 c0       	rjmp	.+76     	; 0x1b4 <WG_send_bit_1+0x60>
	{
		case 0:
			WG_A1_0;
 168:	40 98       	cbi	0x08, 0	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 16a:	85 ef       	ldi	r24, 0xF5	; 245
 16c:	8a 95       	dec	r24
 16e:	f1 f7       	brne	.-4      	; 0x16c <WG_send_bit_1+0x18>
			_delay_us(L_PLUS_TIME);
			WG_A1_1;
 170:	40 9a       	sbi	0x08, 0	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 172:	83 e3       	ldi	r24, 0x33	; 51
 174:	97 e0       	ldi	r25, 0x07	; 7
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <WG_send_bit_1+0x22>
			_delay_us(INTERVAL_TIME);
			D1_BLINK;
 17a:	8b b1       	in	r24, 0x0b	; 11
 17c:	90 e2       	ldi	r25, 0x20	; 32
 17e:	0b c0       	rjmp	.+22     	; 0x196 <WG_send_bit_1+0x42>
			break;
		case 1:
			WG_A2_0;
 180:	42 98       	cbi	0x08, 2	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 182:	85 ef       	ldi	r24, 0xF5	; 245
 184:	8a 95       	dec	r24
 186:	f1 f7       	brne	.-4      	; 0x184 <WG_send_bit_1+0x30>
			_delay_us(L_PLUS_TIME);
			WG_A2_1;
 188:	42 9a       	sbi	0x08, 2	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 18a:	83 e3       	ldi	r24, 0x33	; 51
 18c:	97 e0       	ldi	r25, 0x07	; 7
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <WG_send_bit_1+0x3a>
			_delay_us(INTERVAL_TIME);
			D2_BLINK;
 192:	8b b1       	in	r24, 0x0b	; 11
 194:	90 e4       	ldi	r25, 0x40	; 64
 196:	89 27       	eor	r24, r25
 198:	0b c0       	rjmp	.+22     	; 0x1b0 <WG_send_bit_1+0x5c>
			break;
		case 2:
			WG_A3_0;
 19a:	44 98       	cbi	0x08, 4	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 19c:	85 ef       	ldi	r24, 0xF5	; 245
 19e:	8a 95       	dec	r24
 1a0:	f1 f7       	brne	.-4      	; 0x19e <WG_send_bit_1+0x4a>
			_delay_us(L_PLUS_TIME);
			WG_A3_1;
 1a2:	44 9a       	sbi	0x08, 4	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1a4:	83 e3       	ldi	r24, 0x33	; 51
 1a6:	97 e0       	ldi	r25, 0x07	; 7
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <WG_send_bit_1+0x54>
			_delay_us(INTERVAL_TIME);
			D3_BLINK;
 1ac:	8b b1       	in	r24, 0x0b	; 11
 1ae:	80 58       	subi	r24, 0x80	; 128
 1b0:	8b b9       	out	0x0b, r24	; 11
 1b2:	08 95       	ret
			break;
		case 3:
			WG_A4_0;
 1b4:	29 98       	cbi	0x05, 1	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1b6:	85 ef       	ldi	r24, 0xF5	; 245
 1b8:	8a 95       	dec	r24
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <WG_send_bit_1+0x64>
			_delay_us(L_PLUS_TIME);
			WG_A4_1;
 1bc:	29 9a       	sbi	0x05, 1	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1be:	83 e3       	ldi	r24, 0x33	; 51
 1c0:	97 e0       	ldi	r25, 0x07	; 7
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <WG_send_bit_1+0x6e>
			_delay_us(INTERVAL_TIME);
			D4_BLINK;
 1c6:	85 b1       	in	r24, 0x05	; 5
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	89 27       	eor	r24, r25
 1cc:	85 b9       	out	0x05, r24	; 5
 1ce:	08 95       	ret

000001d0 <WG_send_bit_0>:
	}
}

void WG_send_bit_0(unsigned char channel)
{
	switch(channel)
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	a1 f0       	breq	.+40     	; 0x1fc <WG_send_bit_0+0x2c>
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	30 f0       	brcs	.+12     	; 0x1e4 <WG_send_bit_0+0x14>
 1d8:	82 30       	cpi	r24, 0x02	; 2
 1da:	e9 f0       	breq	.+58     	; 0x216 <WG_send_bit_0+0x46>
 1dc:	83 30       	cpi	r24, 0x03	; 3
 1de:	09 f0       	breq	.+2      	; 0x1e2 <WG_send_bit_0+0x12>
 1e0:	34 c0       	rjmp	.+104    	; 0x24a <WG_send_bit_0+0x7a>
 1e2:	26 c0       	rjmp	.+76     	; 0x230 <WG_send_bit_0+0x60>
	{
		case 0:
			WG_B1_0;
 1e4:	41 98       	cbi	0x08, 1	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1e6:	85 ef       	ldi	r24, 0xF5	; 245
 1e8:	8a 95       	dec	r24
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <WG_send_bit_0+0x18>
			_delay_us(L_PLUS_TIME);
			WG_B1_1;
 1ec:	41 9a       	sbi	0x08, 1	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1ee:	83 e3       	ldi	r24, 0x33	; 51
 1f0:	97 e0       	ldi	r25, 0x07	; 7
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <WG_send_bit_0+0x22>
			_delay_us(INTERVAL_TIME);
			D1_BLINK;
 1f6:	8b b1       	in	r24, 0x0b	; 11
 1f8:	90 e2       	ldi	r25, 0x20	; 32
 1fa:	0b c0       	rjmp	.+22     	; 0x212 <WG_send_bit_0+0x42>
			break;
		case 1:
			WG_B2_0;
 1fc:	43 98       	cbi	0x08, 3	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1fe:	85 ef       	ldi	r24, 0xF5	; 245
 200:	8a 95       	dec	r24
 202:	f1 f7       	brne	.-4      	; 0x200 <WG_send_bit_0+0x30>
			_delay_us(L_PLUS_TIME);
			WG_B2_1;
 204:	43 9a       	sbi	0x08, 3	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 206:	83 e3       	ldi	r24, 0x33	; 51
 208:	97 e0       	ldi	r25, 0x07	; 7
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <WG_send_bit_0+0x3a>
			_delay_us(INTERVAL_TIME);
			D2_BLINK;
 20e:	8b b1       	in	r24, 0x0b	; 11
 210:	90 e4       	ldi	r25, 0x40	; 64
 212:	89 27       	eor	r24, r25
 214:	0b c0       	rjmp	.+22     	; 0x22c <WG_send_bit_0+0x5c>
			break;
		case 2:
			WG_B3_0;
 216:	45 98       	cbi	0x08, 5	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 218:	85 ef       	ldi	r24, 0xF5	; 245
 21a:	8a 95       	dec	r24
 21c:	f1 f7       	brne	.-4      	; 0x21a <WG_send_bit_0+0x4a>
			_delay_us(L_PLUS_TIME);
			WG_B3_1;
 21e:	45 9a       	sbi	0x08, 5	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 220:	83 e3       	ldi	r24, 0x33	; 51
 222:	97 e0       	ldi	r25, 0x07	; 7
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <WG_send_bit_0+0x54>
			_delay_us(INTERVAL_TIME);
			D3_BLINK;
 228:	8b b1       	in	r24, 0x0b	; 11
 22a:	80 58       	subi	r24, 0x80	; 128
 22c:	8b b9       	out	0x0b, r24	; 11
 22e:	08 95       	ret
			break;
		case 3:
			WG_B4_0;
 230:	2a 98       	cbi	0x05, 2	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 232:	85 ef       	ldi	r24, 0xF5	; 245
 234:	8a 95       	dec	r24
 236:	f1 f7       	brne	.-4      	; 0x234 <WG_send_bit_0+0x64>
			_delay_us(L_PLUS_TIME);
			WG_B4_1;
 238:	2a 9a       	sbi	0x05, 2	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 23a:	83 e3       	ldi	r24, 0x33	; 51
 23c:	97 e0       	ldi	r25, 0x07	; 7
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <WG_send_bit_0+0x6e>
			_delay_us(INTERVAL_TIME);
			D4_BLINK;
 242:	85 b1       	in	r24, 0x05	; 5
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	89 27       	eor	r24, r25
 248:	85 b9       	out	0x05, r24	; 5
 24a:	08 95       	ret

0000024c <send_wiegand34>:
			break;
	}   
}

void send_wiegand34(unsigned char *wiegand, unsigned char channel)
{
 24c:	cf 92       	push	r12
 24e:	df 92       	push	r13
 250:	ef 92       	push	r14
 252:	ff 92       	push	r15
 254:	0f 93       	push	r16
 256:	1f 93       	push	r17
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	7c 01       	movw	r14, r24
 25e:	c6 2e       	mov	r12, r22
    unsigned char even; 		// 韦根包前16位偶效验
    unsigned char odd; 			// 韦根包后16位齐效验
	unsigned char temp = 0;

    //--------------------------------计算前16位1的个数是否为偶数，为偶效验用
    check_temp = wiegand[1];
 260:	fc 01       	movw	r30, r24
 262:	91 81       	ldd	r25, Z+1	; 0x01
    check_temp ^= wiegand[0];
 264:	80 81       	ld	r24, Z
 266:	98 27       	eor	r25, r24
    check_temp ^= check_temp>>4;
 268:	89 2f       	mov	r24, r25
 26a:	82 95       	swap	r24
 26c:	8f 70       	andi	r24, 0x0F	; 15
 26e:	89 27       	eor	r24, r25
    check_temp ^= check_temp>>2;
 270:	28 2f       	mov	r18, r24
 272:	26 95       	lsr	r18
 274:	26 95       	lsr	r18
 276:	28 27       	eor	r18, r24
    check_temp ^= check_temp>>1;
 278:	32 2f       	mov	r19, r18
 27a:	36 95       	lsr	r19
    even = check_temp&1;
 
    //--------------------------------计算后16位1的个数是否为偶数，为奇效验用
    check_temp = wiegand[2];
 27c:	92 81       	ldd	r25, Z+2	; 0x02
    check_temp ^= wiegand[3];
 27e:	83 81       	ldd	r24, Z+3	; 0x03
 280:	98 27       	eor	r25, r24
    check_temp ^= check_temp>>4;
 282:	89 2f       	mov	r24, r25
 284:	82 95       	swap	r24
 286:	8f 70       	andi	r24, 0x0F	; 15
 288:	89 27       	eor	r24, r25
    check_temp ^= check_temp>>2;
 28a:	d8 2e       	mov	r13, r24
 28c:	d6 94       	lsr	r13
 28e:	d6 94       	lsr	r13
 290:	d8 26       	eor	r13, r24
    check_temp ^= check_temp>>1;
    odd = !(check_temp&1);
 
    if(even)
 292:	32 27       	eor	r19, r18
 294:	30 ff       	sbrs	r19, 0
 296:	03 c0       	rjmp	.+6      	; 0x29e <send_wiegand34+0x52>
        WG_send_bit_1(channel);
 298:	86 2f       	mov	r24, r22
 29a:	5c df       	rcall	.-328    	; 0x154 <WG_send_bit_1>
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <send_wiegand34+0x56>
    else
        WG_send_bit_0(channel);
 29e:	86 2f       	mov	r24, r22
 2a0:	97 df       	rcall	.-210    	; 0x1d0 <WG_send_bit_0>
 2a2:	c0 e0       	ldi	r28, 0x00	; 0
 2a4:	d0 e0       	ldi	r29, 0x00	; 0
		
    for(i=0;i<4;i++)
    {
		temp = wiegand[i];
 2a6:	f7 01       	movw	r30, r14
 2a8:	ec 0f       	add	r30, r28
 2aa:	fd 1f       	adc	r31, r29
 2ac:	00 81       	ld	r16, Z
 2ae:	10 e0       	ldi	r17, 0x00	; 0
		for(j=0; j<8; j++)
		{
			if(temp&0x80)
 2b0:	07 ff       	sbrs	r16, 7
 2b2:	03 c0       	rjmp	.+6      	; 0x2ba <send_wiegand34+0x6e>
				WG_send_bit_1(channel);
 2b4:	8c 2d       	mov	r24, r12
 2b6:	4e df       	rcall	.-356    	; 0x154 <WG_send_bit_1>
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <send_wiegand34+0x72>
			else
				WG_send_bit_0(channel);
 2ba:	8c 2d       	mov	r24, r12
 2bc:	89 df       	rcall	.-238    	; 0x1d0 <WG_send_bit_0>
        WG_send_bit_0(channel);
		
    for(i=0;i<4;i++)
    {
		temp = wiegand[i];
		for(j=0; j<8; j++)
 2be:	1f 5f       	subi	r17, 0xFF	; 255
 2c0:	18 30       	cpi	r17, 0x08	; 8
 2c2:	11 f0       	breq	.+4      	; 0x2c8 <send_wiegand34+0x7c>
		{
			if(temp&0x80)
				WG_send_bit_1(channel);
			else
				WG_send_bit_0(channel);
			temp <<= 1;
 2c4:	00 0f       	add	r16, r16
 2c6:	f4 cf       	rjmp	.-24     	; 0x2b0 <send_wiegand34+0x64>
 2c8:	21 96       	adiw	r28, 0x01	; 1
    if(even)
        WG_send_bit_1(channel);
    else
        WG_send_bit_0(channel);
		
    for(i=0;i<4;i++)
 2ca:	c4 30       	cpi	r28, 0x04	; 4
 2cc:	d1 05       	cpc	r29, r1
 2ce:	59 f7       	brne	.-42     	; 0x2a6 <send_wiegand34+0x5a>
    //--------------------------------计算后16位1的个数是否为偶数，为奇效验用
    check_temp = wiegand[2];
    check_temp ^= wiegand[3];
    check_temp ^= check_temp>>4;
    check_temp ^= check_temp>>2;
    check_temp ^= check_temp>>1;
 2d0:	8d 2d       	mov	r24, r13
 2d2:	86 95       	lsr	r24
				WG_send_bit_0(channel);
			temp <<= 1;
		}
    }
	
    if(odd)
 2d4:	8d 25       	eor	r24, r13
 2d6:	80 fd       	sbrc	r24, 0
 2d8:	03 c0       	rjmp	.+6      	; 0x2e0 <send_wiegand34+0x94>
        WG_send_bit_1(channel);
 2da:	8c 2d       	mov	r24, r12
 2dc:	3b df       	rcall	.-394    	; 0x154 <WG_send_bit_1>
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <send_wiegand34+0x98>
    else
        WG_send_bit_0(channel);
 2e0:	8c 2d       	mov	r24, r12
 2e2:	76 df       	rcall	.-276    	; 0x1d0 <WG_send_bit_0>
}
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	1f 91       	pop	r17
 2ea:	0f 91       	pop	r16
 2ec:	ff 90       	pop	r15
 2ee:	ef 90       	pop	r14
 2f0:	df 90       	pop	r13
 2f2:	cf 90       	pop	r12
 2f4:	08 95       	ret

000002f6 <CheckSum>:

unsigned char CheckSum(unsigned char *uBuff, unsigned char uBuffLen)
{
 2f6:	fc 01       	movw	r30, r24
 2f8:	20 e0       	ldi	r18, 0x00	; 0
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	03 c0       	rjmp	.+6      	; 0x304 <__stack+0x5>
	unsigned char i,uSum=0;
	for(i=0;i<uBuffLen;i++)
		uSum += uBuff[i];
 2fe:	81 91       	ld	r24, Z+
 300:	98 0f       	add	r25, r24
}

unsigned char CheckSum(unsigned char *uBuff, unsigned char uBuffLen)
{
	unsigned char i,uSum=0;
	for(i=0;i<uBuffLen;i++)
 302:	2f 5f       	subi	r18, 0xFF	; 255
 304:	26 17       	cp	r18, r22
 306:	d8 f3       	brcs	.-10     	; 0x2fe <CheckSum+0x8>
		uSum += uBuff[i];
	uSum = (~uSum) + 1;
	return uSum;
}
 308:	89 2f       	mov	r24, r25
 30a:	81 95       	neg	r24
 30c:	08 95       	ret

0000030e <display>:


void display(void)
{
 30e:	20 e0       	ldi	r18, 0x00	; 0
	unsigned char i = 0;
	for(i=0; i<8; i++)
	{
		D1_BLINK;
 310:	60 e2       	ldi	r22, 0x20	; 32
		FEED_DOG;
 312:	30 e1       	ldi	r19, 0x10	; 16
 314:	48 eb       	ldi	r20, 0xB8	; 184
 316:	50 e0       	ldi	r21, 0x00	; 0
void display(void)
{
	unsigned char i = 0;
	for(i=0; i<8; i++)
	{
		D1_BLINK;
 318:	8b b1       	in	r24, 0x0b	; 11
 31a:	86 27       	eor	r24, r22
 31c:	8b b9       	out	0x0b, r24	; 11
		FEED_DOG;
 31e:	8b b1       	in	r24, 0x0b	; 11
 320:	83 27       	eor	r24, r19
 322:	8b b9       	out	0x0b, r24	; 11
 324:	8c ed       	ldi	r24, 0xDC	; 220
 326:	95 e0       	ldi	r25, 0x05	; 5
 328:	fa 01       	movw	r30, r20
 32a:	31 97       	sbiw	r30, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <display+0x1c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 32e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 330:	d9 f7       	brne	.-10     	; 0x328 <display+0x1a>


void display(void)
{
	unsigned char i = 0;
	for(i=0; i<8; i++)
 332:	2f 5f       	subi	r18, 0xFF	; 255
 334:	28 30       	cpi	r18, 0x08	; 8
 336:	81 f7       	brne	.-32     	; 0x318 <display+0xa>
	{
		D1_BLINK;
		FEED_DOG;
		_delay_ms(150);
	}
	D1_OFF;
 338:	8b b1       	in	r24, 0x0b	; 11
 33a:	80 72       	andi	r24, 0x20	; 32
 33c:	8b b9       	out	0x0b, r24	; 11
}
 33e:	08 95       	ret

00000340 <main>:

int main(void)
{
 340:	ff 92       	push	r15
 342:	0f 93       	push	r16
 344:	1f 93       	push	r17
 346:	df 93       	push	r29
 348:	cf 93       	push	r28
 34a:	00 d0       	rcall	.+0      	; 0x34c <main+0xc>
 34c:	00 d0       	rcall	.+0      	; 0x34e <main+0xe>
 34e:	cd b7       	in	r28, 0x3d	; 61
 350:	de b7       	in	r29, 0x3e	; 62
	unsigned char sum = 0;
//	unsigned char channel[4] = {0};
//	unsigned char temp = 0;
//	unsigned char wg[4][4] = {{0}};
	unsigned char wg[4] = {0};
 352:	19 82       	std	Y+1, r1	; 0x01
 354:	1a 82       	std	Y+2, r1	; 0x02
 356:	1b 82       	std	Y+3, r1	; 0x03
 358:	1c 82       	std	Y+4, r1	; 0x04

	cli();
 35a:	f8 94       	cli
    PortInit();
 35c:	7c de       	rcall	.-776    	; 0x56 <PortInit>
	display();
 35e:	d7 df       	rcall	.-82     	; 0x30e <display>
    PINC = 0x00;
}

void UartInit(void)
{
    UBRR0H = (F_CPU / BAUD / 16 - 1) / 256;
 360:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = (F_CPU / BAUD / 16 - 1) % 256;
 364:	83 e0       	ldi	r24, 0x03	; 3
 366:	80 93 c4 00 	sts	0x00C4, r24
    UCSR0B = 1<<RXEN0 | 1<<TXEN0 | 1<<RXCIE0;
 36a:	88 e9       	ldi	r24, 0x98	; 152
 36c:	80 93 c1 00 	sts	0x00C1, r24
    UCSR0C = 1<<UCSZ00 | 1<<UCSZ01;
 370:	86 e0       	ldi	r24, 0x06	; 6
 372:	80 93 c2 00 	sts	0x00C2, r24

	cli();
    PortInit();
	display();
	UartInit();
	sei();
 376:	78 94       	sei
				{	
//					temp = ((U0Buf[4])&0x03);
//					channel[temp] = 1;
//					memcpy(wg[temp],&U0Buf[15],4);
					memcpy(wg,&U0Buf[15],4);
					send_wiegand34(wg,(U0Buf[4])&0x03);
 378:	8e 01       	movw	r16, r28
 37a:	0f 5f       	subi	r16, 0xFF	; 255
 37c:	1f 4f       	sbci	r17, 0xFF	; 255
				}
			}
			U0Count = U0Ready = 0;
		}
		FEED_DOG;
 37e:	80 e1       	ldi	r24, 0x10	; 16
 380:	f8 2e       	mov	r15, r24
	display();
	UartInit();
	sei();
	while(1)
    {
		if(U0Ready)
 382:	80 91 04 01 	lds	r24, 0x0104
 386:	88 23       	and	r24, r24
 388:	89 f1       	breq	.+98     	; 0x3ec <main+0xac>
		{	
			if(U0Count>19)
 38a:	80 91 25 01 	lds	r24, 0x0125
 38e:	84 31       	cpi	r24, 0x14	; 20
 390:	38 f1       	brcs	.+78     	; 0x3e0 <main+0xa0>
			{
				sum = CheckSum(U0Buf,U0Count-1);
 392:	30 91 25 01 	lds	r19, 0x0125
 396:	31 50       	subi	r19, 0x01	; 1
 398:	e5 e0       	ldi	r30, 0x05	; 5
 39a:	f1 e0       	ldi	r31, 0x01	; 1
 39c:	20 e0       	ldi	r18, 0x00	; 0
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	03 c0       	rjmp	.+6      	; 0x3a8 <main+0x68>

unsigned char CheckSum(unsigned char *uBuff, unsigned char uBuffLen)
{
	unsigned char i,uSum=0;
	for(i=0;i<uBuffLen;i++)
		uSum += uBuff[i];
 3a2:	81 91       	ld	r24, Z+
 3a4:	28 0f       	add	r18, r24
}

unsigned char CheckSum(unsigned char *uBuff, unsigned char uBuffLen)
{
	unsigned char i,uSum=0;
	for(i=0;i<uBuffLen;i++)
 3a6:	9f 5f       	subi	r25, 0xFF	; 255
 3a8:	93 17       	cp	r25, r19
 3aa:	d8 f3       	brcs	.-10     	; 0x3a2 <main+0x62>
		if(U0Ready)
		{	
			if(U0Count>19)
			{
				sum = CheckSum(U0Buf,U0Count-1);
				if(U0Buf[U0Count-1]==sum)
 3ac:	e0 91 25 01 	lds	r30, 0x0125
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	ec 5f       	subi	r30, 0xFC	; 252
 3b4:	fe 4f       	sbci	r31, 0xFE	; 254
 3b6:	21 95       	neg	r18
 3b8:	80 81       	ld	r24, Z
 3ba:	82 17       	cp	r24, r18
 3bc:	89 f4       	brne	.+34     	; 0x3e0 <main+0xa0>
				{	
//					temp = ((U0Buf[4])&0x03);
//					channel[temp] = 1;
//					memcpy(wg[temp],&U0Buf[15],4);
					memcpy(wg,&U0Buf[15],4);
 3be:	80 91 14 01 	lds	r24, 0x0114
 3c2:	90 91 15 01 	lds	r25, 0x0115
 3c6:	a0 91 16 01 	lds	r26, 0x0116
 3ca:	b0 91 17 01 	lds	r27, 0x0117
 3ce:	89 83       	std	Y+1, r24	; 0x01
 3d0:	9a 83       	std	Y+2, r25	; 0x02
 3d2:	ab 83       	std	Y+3, r26	; 0x03
 3d4:	bc 83       	std	Y+4, r27	; 0x04
					send_wiegand34(wg,(U0Buf[4])&0x03);
 3d6:	60 91 09 01 	lds	r22, 0x0109
 3da:	63 70       	andi	r22, 0x03	; 3
 3dc:	c8 01       	movw	r24, r16
 3de:	36 df       	rcall	.-404    	; 0x24c <send_wiegand34>
				}
			}
			U0Count = U0Ready = 0;
 3e0:	10 92 04 01 	sts	0x0104, r1
 3e4:	80 91 04 01 	lds	r24, 0x0104
 3e8:	80 93 25 01 	sts	0x0125, r24
		}
		FEED_DOG;
 3ec:	8b b1       	in	r24, 0x0b	; 11
 3ee:	8f 25       	eor	r24, r15
 3f0:	8b b9       	out	0x0b, r24	; 11
 3f2:	c7 cf       	rjmp	.-114    	; 0x382 <main+0x42>

000003f4 <_exit>:
 3f4:	f8 94       	cli

000003f6 <__stop_program>:
 3f6:	ff cf       	rjmp	.-2      	; 0x3f6 <__stop_program>
